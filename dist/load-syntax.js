"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.evalCompiletimeValue = exports.evalRuntimeValues = exports.sanitizeReplacementValues = undefined;

var _termExpander = require("./term-expander");

var _termExpander2 = _interopRequireDefault(_termExpander);

var _immutable = require("immutable");

var _parseReducer = require("./parse-reducer.js");

var _parseReducer2 = _interopRequireDefault(_parseReducer);

var _shiftReducer = require("shift-reducer");

var _shiftReducer2 = _interopRequireDefault(_shiftReducer);

var _serializer = require("./serializer");

var _syntax = require("./syntax");

var _syntax2 = _interopRequireDefault(_syntax);

var _shiftCodegen = require("shift-codegen");

var _shiftCodegen2 = _interopRequireDefault(_shiftCodegen);

var _transforms = require("./transforms");

var _terms = require("./terms");

var _terms2 = _interopRequireDefault(_terms);

var _shiftReader = require("./shift-reader");

var _shiftReader2 = _interopRequireDefault(_shiftReader);

var _macroContext = require("./macro-context");

var _templateProcessor = require("./template-processor");

var _vm = require("vm");

var _vm2 = _interopRequireDefault(_vm);

var _ramda = require("ramda");

var _ = _interopRequireWildcard(_ramda);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let geval_364 = eval;
function sanitizeReplacementValues_365(values_368) {
  if (Array.isArray(values_368)) {
    return sanitizeReplacementValues_365((0, _immutable.List)(values_368));
  } else if (_immutable.List.isList(values_368)) {
    return values_368.map(sanitizeReplacementValues_365);
  } else if (values_368 == null) {
    throw new Error("replacement values for syntax template must not be null or undefined");
  } else if (typeof values_368.next === "function") {
    return sanitizeReplacementValues_365((0, _immutable.List)(values_368));
  }
  return (0, _macroContext.unwrap)(values_368);
}
function evalRuntimeValues_366(terms_369, context_370) {
  let prepped_371 = terms_369.reduce((acc_377, term_378) => {
    let result_379 = (0, _immutable.List)();
    if ((0, _terms.isExport)(term_378)) {
      if ((0, _terms.isVariableDeclaration)(term_378.declaration)) {
        return acc_377.concat(new _terms2.default("VariableDeclarationStatement", { declaration: term_378.declaration })).concat(term_378.declaration.declarators.map(decl_380 => {
          return new _terms2.default("ExpressionStatement", { expression: new _terms2.default("AssignmentExpression", { binding: new _terms2.default("StaticMemberExpression", { object: new _terms2.default("IdentifierExpression", { name: _syntax2.default.fromIdentifier("exports") }), property: decl_380.binding.name }), expression: new _terms2.default("IdentifierExpression", { name: decl_380.binding.name }) }) });
        }));
      }
    } else if ((0, _terms.isImport)(term_378)) {
      return acc_377;
    }
    return acc_377.concat(term_378);
  }, (0, _immutable.List)());
  let parsed_372 = (0, _shiftReducer2.default)(new _parseReducer2.default(context_370, false), new _terms2.default("Module", { directives: (0, _immutable.List)(), items: prepped_371 }).gen({ includeImports: false }));
  let gen_373 = (0, _shiftCodegen2.default)(parsed_372, new _shiftCodegen.FormattedCodeGen());
  let result_374 = context_370.transform(gen_373, { babelrc: true, filename: context_370.filename });
  let exportsObj_375 = {};
  context_370.store.set("exports", exportsObj_375);
  let val_376 = _vm2.default.runInContext(result_374.code, context_370.store.getNodeContext());
  return exportsObj_375;
}
function evalCompiletimeValue_367(expr_381, context_382) {
  let deserializer_383 = (0, _serializer.makeDeserializer)(context_382.bindings);
  let sandbox_384 = { syntaxQuote: function syntaxQuote(strings_392) {
      for (var _len = arguments.length, values_391 = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        values_391[_key - 1] = arguments[_key];
      }

      let ctx_393 = deserializer_383.read(_.last(values_391));
      let reader_394 = new _shiftReader2.default(strings_392, ctx_393, _.take(values_391.length - 1, values_391));
      return reader_394.read();
    }, syntaxTemplate: function syntaxTemplate(str_396) {
      for (var _len2 = arguments.length, values_395 = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        values_395[_key2 - 1] = arguments[_key2];
      }

      return (0, _templateProcessor.replaceTemplate)(deserializer_383.read(str_396), sanitizeReplacementValues_365(values_395));
    } };
  let sandboxKeys_385 = (0, _immutable.List)(Object.keys(sandbox_384));
  let sandboxVals_386 = sandboxKeys_385.map(k_397 => sandbox_384[k_397]).toArray();
  let parsed_387 = (0, _shiftReducer2.default)(new _parseReducer2.default(context_382), new _terms2.default("Module", { directives: (0, _immutable.List)(), items: _immutable.List.of(new _terms2.default("ExpressionStatement", { expression: new _terms2.default("FunctionExpression", { isGenerator: false, name: null, params: new _terms2.default("FormalParameters", { items: sandboxKeys_385.map(param_398 => {
            return new _terms2.default("BindingIdentifier", { name: _syntax2.default.from("identifier", param_398) });
          }), rest: null }), body: new _terms2.default("FunctionBody", { directives: _immutable.List.of(new _terms2.default("Directive", { rawValue: "use strict" })), statements: _immutable.List.of(new _terms2.default("ReturnStatement", { expression: expr_381 })) }) }) })) }));
  let gen_388 = (0, _shiftCodegen2.default)(parsed_387, new _shiftCodegen.FormattedCodeGen());
  let result_389 = context_382.transform(gen_388, { babelrc: true, filename: context_382.filename });
  let val_390 = _vm2.default.runInContext(result_389.code, context_382.store.getNodeContext());
  return val_390.apply(undefined, sandboxVals_386);
}
exports.sanitizeReplacementValues = sanitizeReplacementValues_365;
exports.evalRuntimeValues = evalRuntimeValues_366;
exports.evalCompiletimeValue = evalCompiletimeValue_367;
//# sourceMappingURL=data:application/json;base64,