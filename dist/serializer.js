"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.serializer = exports.makeDeserializer = undefined;

var _transitJs = require("transit-js");

var _transitJs2 = _interopRequireDefault(_transitJs);

var _immutable = require("immutable");

var _syntax = require("./syntax");

var _syntax2 = _interopRequireDefault(_syntax);

var _symbol = require("./symbol");

var _tokenizer = require("shift-parser/dist/tokenizer");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let typeMap_584 = [_tokenizer.TokenType.STRING, _tokenizer.TokenType.EOS, _tokenizer.TokenType.LPAREN, _tokenizer.TokenType.RPAREN, _tokenizer.TokenType.LBRACK, _tokenizer.TokenType.RBRACK, _tokenizer.TokenType.LBRACE, _tokenizer.TokenType.RBRACE, _tokenizer.TokenType.COLON, _tokenizer.TokenType.SEMICOLON, _tokenizer.TokenType.PERIOD, _tokenizer.TokenType.ELLIPSIS, _tokenizer.TokenType.ARROW, _tokenizer.TokenType.CONDITIONAL, _tokenizer.TokenType.INC, _tokenizer.TokenType.DEC, _tokenizer.TokenType.ASSIGN, _tokenizer.TokenType.ASSIGN_BIT_OR, _tokenizer.TokenType.ASSIGN_BIT_XOR, _tokenizer.TokenType.ASSIGN_BIT_AND, _tokenizer.TokenType.ASSIGN_SHL, _tokenizer.TokenType.ASSIGN_SHR, _tokenizer.TokenType.ASSIGN_SHR_UNSIGNED, _tokenizer.TokenType.ASSIGN_ADD, _tokenizer.TokenType.ASSIGN_SUB, _tokenizer.TokenType.ASSIGN_MUL, _tokenizer.TokenType.ASSIGN_DIV, _tokenizer.TokenType.ASSIGN_MOD, _tokenizer.TokenType.COMMA, _tokenizer.TokenType.OR, _tokenizer.TokenType.AND, _tokenizer.TokenType.BIT_OR, _tokenizer.TokenType.BIT_XOR, _tokenizer.TokenType.BIT_AND, _tokenizer.TokenType.SHL, _tokenizer.TokenType.SHR, _tokenizer.TokenType.SHR_UNSIGNED, _tokenizer.TokenType.ADD, _tokenizer.TokenType.SUB, _tokenizer.TokenType.MUL, _tokenizer.TokenType.DIV, _tokenizer.TokenType.MOD, _tokenizer.TokenType.EQ, _tokenizer.TokenType.NE, _tokenizer.TokenType.EQ_STRICT, _tokenizer.TokenType.NE_STRICT, _tokenizer.TokenType.LT, _tokenizer.TokenType.GT, _tokenizer.TokenType.LTE, _tokenizer.TokenType.GTE, _tokenizer.TokenType.INSTANCEOF, _tokenizer.TokenType.IN, _tokenizer.TokenType.NOT, _tokenizer.TokenType.BIT_NOT, _tokenizer.TokenType.AWAIT, _tokenizer.TokenType.DELETE, _tokenizer.TokenType.TYPEOF, _tokenizer.TokenType.VOID, _tokenizer.TokenType.BREAK, _tokenizer.TokenType.CASE, _tokenizer.TokenType.CATCH, _tokenizer.TokenType.CLASS, _tokenizer.TokenType.CONTINUE, _tokenizer.TokenType.DEBUGGER, _tokenizer.TokenType.DEFAULT, _tokenizer.TokenType.DO, _tokenizer.TokenType.ELSE, _tokenizer.TokenType.EXPORT, _tokenizer.TokenType.EXTENDS, _tokenizer.TokenType.FINALLY, _tokenizer.TokenType.FOR, _tokenizer.TokenType.FUNCTION, _tokenizer.TokenType.IF, _tokenizer.TokenType.IMPORT, _tokenizer.TokenType.LET, _tokenizer.TokenType.NEW, _tokenizer.TokenType.RETURN, _tokenizer.TokenType.SUPER, _tokenizer.TokenType.SWITCH, _tokenizer.TokenType.THIS, _tokenizer.TokenType.THROW, _tokenizer.TokenType.TRY, _tokenizer.TokenType.VAR, _tokenizer.TokenType.WHILE, _tokenizer.TokenType.WITH, _tokenizer.TokenType.NULL, _tokenizer.TokenType.TRUE, _tokenizer.TokenType.FALSE, _tokenizer.TokenType.YIELD, _tokenizer.TokenType.NUMBER, _tokenizer.TokenType.STRING, _tokenizer.TokenType.REGEXP, _tokenizer.TokenType.IDENTIFIER, _tokenizer.TokenType.CONST, _tokenizer.TokenType.TEMPLATE, _tokenizer.TokenType.ILLEGAL];
let ListHandler_585 = _transitJs2.default.makeWriteHandler({ tag: () => "array", rep: v_591 => v_591 });
let MapHandler_586 = _transitJs2.default.makeWriteHandler({ tag: function tag(v_592) {
    return "map";
  }, rep: function rep(v_593) {
    return v_593;
  }, stringRep: function stringRep(v_594) {
    return null;
  } });
let SyntaxHandler_587 = _transitJs2.default.makeWriteHandler({ tag: () => "stx", rep: v_595 => {
    if (_immutable.List.isList(v_595.token)) {
      return [v_595.token, v_595.scopesets];
    } else {
      let t = _transitJs2.default.objectToMap(v_595.token);
      t.set("type", typeMap_584.indexOf(v_595.token.type));
      return [t, v_595.scopesets];
    }
  } });
let SymbolHandler_588 = _transitJs2.default.makeWriteHandler({ tag: () => "symb", rep: v_596 => [v_596.name] });
let writer_589 = _transitJs2.default.writer("json", { handlers: _transitJs2.default.map([_immutable.List, ListHandler_585, _immutable.Map, MapHandler_586, _syntax2.default, SyntaxHandler_587, _symbol.SymbolClass, SymbolHandler_588]) });
function makeReader_590(bindings_597) {
  return _transitJs2.default.reader("json", { arrayBuilder: { init: node_598 => (0, _immutable.List)().asMutable(), add: (ret_599, val_600, node_601) => ret_599.push(val_600), finalize: (ret_602, node_603) => ret_602.asImmutable(), fromArray: (arr_604, node_605) => (0, _immutable.List)(arr_604) }, mapBuilder: { init: function init(node_606) {
        return (0, _immutable.Map)().asMutable();
      }, add: function add(ret_607, key_608, val_609, node_610) {
        return ret_607.set(key_608, val_609);
      }, finalize: function finalize(ret_611, node_612) {
        return ret_611.asImmutable();
      } }, handlers: { stx: rep_613 => {
        let scopesets_614 = _transitJs2.default.mapToObject(rep_613[1]);
        if (_immutable.List.isList(rep_613[0])) {
          let token = rep_613[0];
          return new _syntax2.default(token, { bindings: bindings_597, scopesets: scopesets_614 });
        } else {
          let token = _transitJs2.default.mapToObject(rep_613[0]);
          token.type = typeMap_584[rep_613[0].get("type")];
          token.slice = rep_613[0].has("slice") ? _transitJs2.default.mapToObject(rep_613[0].get("slice")) : undefined;
          if (token.slice) {
            token.slice.startLocation = _transitJs2.default.mapToObject(token.slice.startLocation);
          }
          return new _syntax2.default(token, { bindings: bindings_597, scopesets: scopesets_614 });
        }
      }, symb: rep_615 => {
        return (0, _symbol.Symbol)(rep_615[0]);
      } } });
}
exports.makeDeserializer = makeReader_590;
exports.serializer = writer_589;
//# sourceMappingURL=data:application/json;base64,