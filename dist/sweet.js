"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.compile = exports.parse = exports.expand = undefined;

var _shiftReader = require("./shift-reader");

var _shiftReader2 = _interopRequireDefault(_shiftReader);

var _immutable = require("immutable");

var _syntax = require("./syntax");

var _syntax2 = _interopRequireDefault(_syntax);

var _env = require("./env");

var _env2 = _interopRequireDefault(_env);

var _shiftReducer = require("shift-reducer");

var _shiftReducer2 = _interopRequireDefault(_shiftReducer);

var _parseReducer = require("./parse-reducer");

var _parseReducer2 = _interopRequireDefault(_parseReducer);

var _shiftCodegen = require("shift-codegen");

var _shiftCodegen2 = _interopRequireDefault(_shiftCodegen);

var _scope = require("./scope");

var _bindingMap = require("./binding-map.js");

var _bindingMap2 = _interopRequireDefault(_bindingMap);

var _terms = require("./terms");

var _terms2 = _interopRequireDefault(_terms);

var _modules = require("./modules");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function expand_751(source_754) {
  let options_755 = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  let bindings_756 = new _bindingMap2.default();
  let modules_757 = new _modules.Modules({ cwd: options_755.cwd, filename: options_755.filename, transform: options_755.transform ? options_755.transform : function (x_760) {
      return { code: x_760 };
    }, moduleResolver: options_755.moduleResolver, moduleLoader: options_755.moduleLoader, bindings: bindings_756 });
  let compiledMod_758 = modules_757.compileEntrypoint(source_754, options_755.filename, options_755.enforcePragma);
  let nativeImports_759 = compiledMod_758.importEntries.filter(imp_761 => !modules_757.has(imp_761.moduleSpecifier.val()));
  return new _terms2.default("Module", { directives: (0, _immutable.List)(), items: nativeImports_759.concat(compiledMod_758.body).concat(compiledMod_758.exportEntries.interpose(new _terms2.default("EmptyStatement", {}))) });
}
function parse_752(source_762, options_763) {
  let includeImports_764 = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];

  return (0, _shiftReducer2.default)(new _parseReducer2.default({ phase: 0 }), expand_751(source_762, options_763).gen({ includeImports: includeImports_764 }));
}
function compile_753(source_765) {
  let options_766 = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  let ast_767 = parse_752(source_765, options_766, options_766.includeImports);
  let gen_768 = (0, _shiftCodegen2.default)(ast_767, new _shiftCodegen.FormattedCodeGen());
  return options_766.transform && !options_766.noBabel ? options_766.transform(gen_768, { babelrc: true, filename: options_766.filename }) : { code: gen_768 };
}
exports.expand = expand_751;
exports.parse = parse_752;
exports.compile = compile_753;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3N3ZWV0L3N3ZWV0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7OztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQSxTQUFTLFVBQVQsQ0FBb0IsVUFBcEIsRUFBa0Q7QUFBQSxNQUFsQixXQUFrQix5REFBSixFQUFJOztBQUNoRCxNQUFJLGVBQWUsMEJBQW5CO0FBQ0EsTUFBSSxjQUFjLHFCQUFZLEVBQUMsS0FBSyxZQUFZLEdBQWxCLEVBQXVCLFVBQVUsWUFBWSxRQUE3QyxFQUF1RCxXQUFXLFlBQVksU0FBWixHQUF3QixZQUFZLFNBQXBDLEdBQWdELFVBQVUsS0FBVixFQUFpQjtBQUMvSixhQUFPLEVBQUMsTUFBTSxLQUFQLEVBQVA7QUFDRCxLQUY2QixFQUUzQixnQkFBZ0IsWUFBWSxjQUZELEVBRWlCLGNBQWMsWUFBWSxZQUYzQyxFQUV5RCxVQUFVLFlBRm5FLEVBQVosQ0FBbEI7QUFHQSxNQUFJLGtCQUFrQixZQUFZLGlCQUFaLENBQThCLFVBQTlCLEVBQTBDLFlBQVksUUFBdEQsRUFBZ0UsWUFBWSxhQUE1RSxDQUF0QjtBQUNBLE1BQUksb0JBQW9CLGdCQUFnQixhQUFoQixDQUE4QixNQUE5QixDQUFxQyxXQUFXLENBQUMsWUFBWSxHQUFaLENBQWdCLFFBQVEsZUFBUixDQUF3QixHQUF4QixFQUFoQixDQUFqRCxDQUF4QjtBQUNBLFNBQU8sb0JBQVMsUUFBVCxFQUFtQixFQUFDLFlBQVksc0JBQWIsRUFBcUIsT0FBTyxrQkFBa0IsTUFBbEIsQ0FBeUIsZ0JBQWdCLElBQXpDLEVBQStDLE1BQS9DLENBQXNELGdCQUFnQixhQUFoQixDQUE4QixTQUE5QixDQUF3QyxvQkFBUyxnQkFBVCxFQUEyQixFQUEzQixDQUF4QyxDQUF0RCxDQUE1QixFQUFuQixDQUFQO0FBQ0Q7QUFDRCxTQUFTLFNBQVQsQ0FBbUIsVUFBbkIsRUFBK0IsV0FBL0IsRUFBdUU7QUFBQSxNQUEzQixrQkFBMkIseURBQU4sSUFBTTs7QUFDckUsU0FBTyw0QkFBTywyQkFBaUIsRUFBQyxPQUFPLENBQVIsRUFBakIsQ0FBUCxFQUFxQyxXQUFXLFVBQVgsRUFBdUIsV0FBdkIsRUFBb0MsR0FBcEMsQ0FBd0MsRUFBQyxnQkFBZ0Isa0JBQWpCLEVBQXhDLENBQXJDLENBQVA7QUFDRDtBQUNELFNBQVMsV0FBVCxDQUFxQixVQUFyQixFQUFtRDtBQUFBLE1BQWxCLFdBQWtCLHlEQUFKLEVBQUk7O0FBQ2pELE1BQUksVUFBVSxVQUFVLFVBQVYsRUFBc0IsV0FBdEIsRUFBbUMsWUFBWSxjQUEvQyxDQUFkO0FBQ0EsTUFBSSxVQUFVLDRCQUFRLE9BQVIsRUFBaUIsb0NBQWpCLENBQWQ7QUFDQSxTQUFPLFlBQVksU0FBWixJQUF5QixDQUFDLFlBQVksT0FBdEMsR0FBZ0QsWUFBWSxTQUFaLENBQXNCLE9BQXRCLEVBQStCLEVBQUMsU0FBUyxJQUFWLEVBQWdCLFVBQVUsWUFBWSxRQUF0QyxFQUEvQixDQUFoRCxHQUFrSSxFQUFDLE1BQU0sT0FBUCxFQUF6STtBQUNEO1FBQ3FCLE0sR0FBZCxVO1FBQ2EsSyxHQUFiLFM7UUFDZSxPLEdBQWYsVyIsImZpbGUiOiJzd2VldC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFkZXIgZnJvbSBcIi4vc2hpZnQtcmVhZGVyXCI7XG5pbXBvcnQge0xpc3R9IGZyb20gXCJpbW11dGFibGVcIjtcbmltcG9ydCBTeW50YXggZnJvbSBcIi4vc3ludGF4XCI7XG5pbXBvcnQgRW52IGZyb20gXCIuL2VudlwiO1xuaW1wb3J0IHJlZHVjZSBmcm9tIFwic2hpZnQtcmVkdWNlclwiO1xuaW1wb3J0IFBhcnNlUmVkdWNlciBmcm9tIFwiLi9wYXJzZS1yZWR1Y2VyXCI7XG5pbXBvcnQgY29kZWdlbiwge0Zvcm1hdHRlZENvZGVHZW59IGZyb20gXCJzaGlmdC1jb2RlZ2VuXCI7XG5pbXBvcnQge1Njb3BlLCBmcmVzaFNjb3BlfSBmcm9tIFwiLi9zY29wZVwiO1xuaW1wb3J0IEJpbmRpbmdNYXAgZnJvbSBcIi4vYmluZGluZy1tYXAuanNcIjtcbmltcG9ydCBUZXJtIGZyb20gXCIuL3Rlcm1zXCI7XG5pbXBvcnQge01vZHVsZXN9IGZyb20gXCIuL21vZHVsZXNcIjtcbmZ1bmN0aW9uIGV4cGFuZF83NTEoc291cmNlXzc1NCwgb3B0aW9uc183NTUgPSB7fSkge1xuICBsZXQgYmluZGluZ3NfNzU2ID0gbmV3IEJpbmRpbmdNYXA7XG4gIGxldCBtb2R1bGVzXzc1NyA9IG5ldyBNb2R1bGVzKHtjd2Q6IG9wdGlvbnNfNzU1LmN3ZCwgZmlsZW5hbWU6IG9wdGlvbnNfNzU1LmZpbGVuYW1lLCB0cmFuc2Zvcm06IG9wdGlvbnNfNzU1LnRyYW5zZm9ybSA/IG9wdGlvbnNfNzU1LnRyYW5zZm9ybSA6IGZ1bmN0aW9uICh4Xzc2MCkge1xuICAgIHJldHVybiB7Y29kZTogeF83NjB9O1xuICB9LCBtb2R1bGVSZXNvbHZlcjogb3B0aW9uc183NTUubW9kdWxlUmVzb2x2ZXIsIG1vZHVsZUxvYWRlcjogb3B0aW9uc183NTUubW9kdWxlTG9hZGVyLCBiaW5kaW5nczogYmluZGluZ3NfNzU2fSk7XG4gIGxldCBjb21waWxlZE1vZF83NTggPSBtb2R1bGVzXzc1Ny5jb21waWxlRW50cnlwb2ludChzb3VyY2VfNzU0LCBvcHRpb25zXzc1NS5maWxlbmFtZSwgb3B0aW9uc183NTUuZW5mb3JjZVByYWdtYSk7XG4gIGxldCBuYXRpdmVJbXBvcnRzXzc1OSA9IGNvbXBpbGVkTW9kXzc1OC5pbXBvcnRFbnRyaWVzLmZpbHRlcihpbXBfNzYxID0+ICFtb2R1bGVzXzc1Ny5oYXMoaW1wXzc2MS5tb2R1bGVTcGVjaWZpZXIudmFsKCkpKTtcbiAgcmV0dXJuIG5ldyBUZXJtKFwiTW9kdWxlXCIsIHtkaXJlY3RpdmVzOiBMaXN0KCksIGl0ZW1zOiBuYXRpdmVJbXBvcnRzXzc1OS5jb25jYXQoY29tcGlsZWRNb2RfNzU4LmJvZHkpLmNvbmNhdChjb21waWxlZE1vZF83NTguZXhwb3J0RW50cmllcy5pbnRlcnBvc2UobmV3IFRlcm0oXCJFbXB0eVN0YXRlbWVudFwiLCB7fSkpKX0pO1xufVxuZnVuY3Rpb24gcGFyc2VfNzUyKHNvdXJjZV83NjIsIG9wdGlvbnNfNzYzLCBpbmNsdWRlSW1wb3J0c183NjQgPSB0cnVlKSB7XG4gIHJldHVybiByZWR1Y2UobmV3IFBhcnNlUmVkdWNlcih7cGhhc2U6IDB9KSwgZXhwYW5kXzc1MShzb3VyY2VfNzYyLCBvcHRpb25zXzc2MykuZ2VuKHtpbmNsdWRlSW1wb3J0czogaW5jbHVkZUltcG9ydHNfNzY0fSkpO1xufVxuZnVuY3Rpb24gY29tcGlsZV83NTMoc291cmNlXzc2NSwgb3B0aW9uc183NjYgPSB7fSkge1xuICBsZXQgYXN0Xzc2NyA9IHBhcnNlXzc1Mihzb3VyY2VfNzY1LCBvcHRpb25zXzc2Niwgb3B0aW9uc183NjYuaW5jbHVkZUltcG9ydHMpO1xuICBsZXQgZ2VuXzc2OCA9IGNvZGVnZW4oYXN0Xzc2NywgbmV3IEZvcm1hdHRlZENvZGVHZW4pO1xuICByZXR1cm4gb3B0aW9uc183NjYudHJhbnNmb3JtICYmICFvcHRpb25zXzc2Ni5ub0JhYmVsID8gb3B0aW9uc183NjYudHJhbnNmb3JtKGdlbl83NjgsIHtiYWJlbHJjOiB0cnVlLCBmaWxlbmFtZTogb3B0aW9uc183NjYuZmlsZW5hbWV9KSA6IHtjb2RlOiBnZW5fNzY4fTtcbn1cbmV4cG9ydCB7ZXhwYW5kXzc1MSBhcyBleHBhbmR9O1xuZXhwb3J0IHtwYXJzZV83NTIgYXMgcGFyc2V9O1xuZXhwb3J0IHtjb21waWxlXzc1MyBhcyBjb21waWxlfSJdfQ==