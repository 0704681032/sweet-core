"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.compile = exports.parse = exports.expand = undefined;

var _shiftReader = require("./shift-reader");

var _shiftReader2 = _interopRequireDefault(_shiftReader);

var _immutable = require("immutable");

var _syntax = require("./syntax");

var _syntax2 = _interopRequireDefault(_syntax);

var _env = require("./env");

var _env2 = _interopRequireDefault(_env);

var _shiftReducer = require("shift-reducer");

var _shiftReducer2 = _interopRequireDefault(_shiftReducer);

var _parseReducer = require("./parse-reducer");

var _parseReducer2 = _interopRequireDefault(_parseReducer);

var _shiftCodegen = require("shift-codegen");

var _shiftCodegen2 = _interopRequireDefault(_shiftCodegen);

var _scope = require("./scope");

var _bindingMap = require("./binding-map.js");

var _bindingMap2 = _interopRequireDefault(_bindingMap);

var _terms = require("./terms");

var _terms2 = _interopRequireDefault(_terms);

var _modules = require("./modules");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function expand_750(source_753) {
  let options_754 = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  let bindings_755 = new _bindingMap2.default();
  let modules_756 = new _modules.Modules({ cwd: options_754.cwd, filename: options_754.filename, transform: options_754.transform ? options_754.transform : function (x_759) {
      return { code: x_759 };
    }, moduleResolver: options_754.moduleResolver, moduleLoader: options_754.moduleLoader, bindings: bindings_755 });
  let compiledMod_757 = modules_756.compileEntrypoint(source_753, options_754.filename, options_754.enforcePragma);
  let nativeImports_758 = compiledMod_757.importEntries.filter(imp_760 => !modules_756.has(imp_760.moduleSpecifier.val()));
  return new _terms2.default("Module", { directives: (0, _immutable.List)(), items: nativeImports_758.concat(compiledMod_757.body).concat(compiledMod_757.exportEntries.interpose(new _terms2.default("EmptyStatement", {}))) });
}
function parse_751(source_761, options_762) {
  let includeImports_763 = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];

  return (0, _shiftReducer2.default)(new _parseReducer2.default({ phase: 0 }), expand_750(source_761, options_762).gen({ includeImports: includeImports_763 }));
}
function compile_752(source_764) {
  let options_765 = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  let ast_766 = parse_751(source_764, options_765, options_765.includeImports);
  let gen_767 = (0, _shiftCodegen2.default)(ast_766, new _shiftCodegen.FormattedCodeGen());
  return options_765.transform && !options_765.noBabel ? options_765.transform(gen_767, { babelrc: true, filename: options_765.filename }) : { code: gen_767 };
}
exports.expand = expand_750;
exports.parse = parse_751;
exports.compile = compile_752;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3N3ZWV0L3N3ZWV0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7OztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQSxTQUFTLFVBQVQsQ0FBb0IsVUFBcEIsRUFBa0Q7QUFBQSxNQUFsQixXQUFrQix5REFBSixFQUFJOztBQUNoRCxNQUFJLGVBQWUsMEJBQW5CO0FBQ0EsTUFBSSxjQUFjLHFCQUFZLEVBQUMsS0FBSyxZQUFZLEdBQWxCLEVBQXVCLFVBQVUsWUFBWSxRQUE3QyxFQUF1RCxXQUFXLFlBQVksU0FBWixHQUF3QixZQUFZLFNBQXBDLEdBQWdELFVBQVUsS0FBVixFQUFpQjtBQUMvSixhQUFPLEVBQUMsTUFBTSxLQUFQLEVBQVA7QUFDRCxLQUY2QixFQUUzQixnQkFBZ0IsWUFBWSxjQUZELEVBRWlCLGNBQWMsWUFBWSxZQUYzQyxFQUV5RCxVQUFVLFlBRm5FLEVBQVosQ0FBbEI7QUFHQSxNQUFJLGtCQUFrQixZQUFZLGlCQUFaLENBQThCLFVBQTlCLEVBQTBDLFlBQVksUUFBdEQsRUFBZ0UsWUFBWSxhQUE1RSxDQUF0QjtBQUNBLE1BQUksb0JBQW9CLGdCQUFnQixhQUFoQixDQUE4QixNQUE5QixDQUFxQyxXQUFXLENBQUMsWUFBWSxHQUFaLENBQWdCLFFBQVEsZUFBUixDQUF3QixHQUF4QixFQUFoQixDQUFqRCxDQUF4QjtBQUNBLFNBQU8sb0JBQVMsUUFBVCxFQUFtQixFQUFDLFlBQVksc0JBQWIsRUFBcUIsT0FBTyxrQkFBa0IsTUFBbEIsQ0FBeUIsZ0JBQWdCLElBQXpDLEVBQStDLE1BQS9DLENBQXNELGdCQUFnQixhQUFoQixDQUE4QixTQUE5QixDQUF3QyxvQkFBUyxnQkFBVCxFQUEyQixFQUEzQixDQUF4QyxDQUF0RCxDQUE1QixFQUFuQixDQUFQO0FBQ0Q7QUFDRCxTQUFTLFNBQVQsQ0FBbUIsVUFBbkIsRUFBK0IsV0FBL0IsRUFBdUU7QUFBQSxNQUEzQixrQkFBMkIseURBQU4sSUFBTTs7QUFDckUsU0FBTyw0QkFBTywyQkFBaUIsRUFBQyxPQUFPLENBQVIsRUFBakIsQ0FBUCxFQUFxQyxXQUFXLFVBQVgsRUFBdUIsV0FBdkIsRUFBb0MsR0FBcEMsQ0FBd0MsRUFBQyxnQkFBZ0Isa0JBQWpCLEVBQXhDLENBQXJDLENBQVA7QUFDRDtBQUNELFNBQVMsV0FBVCxDQUFxQixVQUFyQixFQUFtRDtBQUFBLE1BQWxCLFdBQWtCLHlEQUFKLEVBQUk7O0FBQ2pELE1BQUksVUFBVSxVQUFVLFVBQVYsRUFBc0IsV0FBdEIsRUFBbUMsWUFBWSxjQUEvQyxDQUFkO0FBQ0EsTUFBSSxVQUFVLDRCQUFRLE9BQVIsRUFBaUIsb0NBQWpCLENBQWQ7QUFDQSxTQUFPLFlBQVksU0FBWixJQUF5QixDQUFDLFlBQVksT0FBdEMsR0FBZ0QsWUFBWSxTQUFaLENBQXNCLE9BQXRCLEVBQStCLEVBQUMsU0FBUyxJQUFWLEVBQWdCLFVBQVUsWUFBWSxRQUF0QyxFQUEvQixDQUFoRCxHQUFrSSxFQUFDLE1BQU0sT0FBUCxFQUF6STtBQUNEO1FBQ3FCLE0sR0FBZCxVO1FBQ2EsSyxHQUFiLFM7UUFDZSxPLEdBQWYsVyIsImZpbGUiOiJzd2VldC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFkZXIgZnJvbSBcIi4vc2hpZnQtcmVhZGVyXCI7XG5pbXBvcnQge0xpc3R9IGZyb20gXCJpbW11dGFibGVcIjtcbmltcG9ydCBTeW50YXggZnJvbSBcIi4vc3ludGF4XCI7XG5pbXBvcnQgRW52IGZyb20gXCIuL2VudlwiO1xuaW1wb3J0IHJlZHVjZSBmcm9tIFwic2hpZnQtcmVkdWNlclwiO1xuaW1wb3J0IFBhcnNlUmVkdWNlciBmcm9tIFwiLi9wYXJzZS1yZWR1Y2VyXCI7XG5pbXBvcnQgY29kZWdlbiwge0Zvcm1hdHRlZENvZGVHZW59IGZyb20gXCJzaGlmdC1jb2RlZ2VuXCI7XG5pbXBvcnQge1Njb3BlLCBmcmVzaFNjb3BlfSBmcm9tIFwiLi9zY29wZVwiO1xuaW1wb3J0IEJpbmRpbmdNYXAgZnJvbSBcIi4vYmluZGluZy1tYXAuanNcIjtcbmltcG9ydCBUZXJtIGZyb20gXCIuL3Rlcm1zXCI7XG5pbXBvcnQge01vZHVsZXN9IGZyb20gXCIuL21vZHVsZXNcIjtcbmZ1bmN0aW9uIGV4cGFuZF83NTAoc291cmNlXzc1Mywgb3B0aW9uc183NTQgPSB7fSkge1xuICBsZXQgYmluZGluZ3NfNzU1ID0gbmV3IEJpbmRpbmdNYXA7XG4gIGxldCBtb2R1bGVzXzc1NiA9IG5ldyBNb2R1bGVzKHtjd2Q6IG9wdGlvbnNfNzU0LmN3ZCwgZmlsZW5hbWU6IG9wdGlvbnNfNzU0LmZpbGVuYW1lLCB0cmFuc2Zvcm06IG9wdGlvbnNfNzU0LnRyYW5zZm9ybSA/IG9wdGlvbnNfNzU0LnRyYW5zZm9ybSA6IGZ1bmN0aW9uICh4Xzc1OSkge1xuICAgIHJldHVybiB7Y29kZTogeF83NTl9O1xuICB9LCBtb2R1bGVSZXNvbHZlcjogb3B0aW9uc183NTQubW9kdWxlUmVzb2x2ZXIsIG1vZHVsZUxvYWRlcjogb3B0aW9uc183NTQubW9kdWxlTG9hZGVyLCBiaW5kaW5nczogYmluZGluZ3NfNzU1fSk7XG4gIGxldCBjb21waWxlZE1vZF83NTcgPSBtb2R1bGVzXzc1Ni5jb21waWxlRW50cnlwb2ludChzb3VyY2VfNzUzLCBvcHRpb25zXzc1NC5maWxlbmFtZSwgb3B0aW9uc183NTQuZW5mb3JjZVByYWdtYSk7XG4gIGxldCBuYXRpdmVJbXBvcnRzXzc1OCA9IGNvbXBpbGVkTW9kXzc1Ny5pbXBvcnRFbnRyaWVzLmZpbHRlcihpbXBfNzYwID0+ICFtb2R1bGVzXzc1Ni5oYXMoaW1wXzc2MC5tb2R1bGVTcGVjaWZpZXIudmFsKCkpKTtcbiAgcmV0dXJuIG5ldyBUZXJtKFwiTW9kdWxlXCIsIHtkaXJlY3RpdmVzOiBMaXN0KCksIGl0ZW1zOiBuYXRpdmVJbXBvcnRzXzc1OC5jb25jYXQoY29tcGlsZWRNb2RfNzU3LmJvZHkpLmNvbmNhdChjb21waWxlZE1vZF83NTcuZXhwb3J0RW50cmllcy5pbnRlcnBvc2UobmV3IFRlcm0oXCJFbXB0eVN0YXRlbWVudFwiLCB7fSkpKX0pO1xufVxuZnVuY3Rpb24gcGFyc2VfNzUxKHNvdXJjZV83NjEsIG9wdGlvbnNfNzYyLCBpbmNsdWRlSW1wb3J0c183NjMgPSB0cnVlKSB7XG4gIHJldHVybiByZWR1Y2UobmV3IFBhcnNlUmVkdWNlcih7cGhhc2U6IDB9KSwgZXhwYW5kXzc1MChzb3VyY2VfNzYxLCBvcHRpb25zXzc2MikuZ2VuKHtpbmNsdWRlSW1wb3J0czogaW5jbHVkZUltcG9ydHNfNzYzfSkpO1xufVxuZnVuY3Rpb24gY29tcGlsZV83NTIoc291cmNlXzc2NCwgb3B0aW9uc183NjUgPSB7fSkge1xuICBsZXQgYXN0Xzc2NiA9IHBhcnNlXzc1MShzb3VyY2VfNzY0LCBvcHRpb25zXzc2NSwgb3B0aW9uc183NjUuaW5jbHVkZUltcG9ydHMpO1xuICBsZXQgZ2VuXzc2NyA9IGNvZGVnZW4oYXN0Xzc2NiwgbmV3IEZvcm1hdHRlZENvZGVHZW4pO1xuICByZXR1cm4gb3B0aW9uc183NjUudHJhbnNmb3JtICYmICFvcHRpb25zXzc2NS5ub0JhYmVsID8gb3B0aW9uc183NjUudHJhbnNmb3JtKGdlbl83NjcsIHtiYWJlbHJjOiB0cnVlLCBmaWxlbmFtZTogb3B0aW9uc183NjUuZmlsZW5hbWV9KSA6IHtjb2RlOiBnZW5fNzY3fTtcbn1cbmV4cG9ydCB7ZXhwYW5kXzc1MCBhcyBleHBhbmR9O1xuZXhwb3J0IHtwYXJzZV83NTEgYXMgcGFyc2V9O1xuZXhwb3J0IHtjb21waWxlXzc1MiBhcyBjb21waWxlfSJdfQ==