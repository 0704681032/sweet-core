"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Modules = exports.Module = undefined;

var _immutable = require("immutable");

var _env = require("./env");

var _env2 = _interopRequireDefault(_env);

var _store = require("./store");

var _store2 = _interopRequireDefault(_store);

var _shiftReader = require("./shift-reader");

var _shiftReader2 = _interopRequireDefault(_shiftReader);

var _tokenExpander = require("./token-expander.js");

var _tokenExpander2 = _interopRequireDefault(_tokenExpander);

var _termExpander = require("./term-expander.js");

var _termExpander2 = _interopRequireDefault(_termExpander);

var _bindingMap = require("./binding-map.js");

var _bindingMap2 = _interopRequireDefault(_bindingMap);

var _symbol = require("./symbol");

var _terms = require("./terms");

var _terms2 = _interopRequireDefault(_terms);

var _loadSyntax = require("./load-syntax");

var _compiler = require("./compiler");

var _compiler2 = _interopRequireDefault(_compiler);

var _transforms = require("./transforms");

var _scope = require("./scope");

var _errors = require("./errors");

var _hygieneUtils = require("./hygiene-utils");

var _syntax = require("./syntax");

var _utilsDirname = require("utils-dirname");

var _utilsDirname2 = _interopRequireDefault(_utilsDirname);

var _ramda = require("ramda");

var _ = _interopRequireWildcard(_ramda);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Module_423 {
  constructor(moduleSpecifier_428, isNative_429, importEntries_430, exportEntries_431, pragmas_432, body_433) {
    this.moduleSpecifier = moduleSpecifier_428;
    this.isNative = isNative_429;
    this.importEntries = importEntries_430;
    this.exportEntries = exportEntries_431;
    this.pragmas = pragmas_432;
    this.body = body_433;
  }
}
const findBindingIdentifierName_424 = term_434 => {
  (0, _errors.assert)(term_434.name, `not implemented yet for type ${ term_434.type }`);
  return term_434.name;
};
const convertExport_425 = term_435 => {
  let declaration_436 = term_435.declaration;
  let bindings_437 = [];
  if ((0, _terms.isVariableDeclaration)(declaration_436)) {
    bindings_437 = declaration_436.declarators.map(decl_439 => findBindingIdentifierName_424(decl_439.binding));
  } else if ((0, _terms.isFunctionDeclaration)(declaration_436) || (0, _terms.isClassDeclaration)(declaration_436)) {
    bindings_437.push(findBindingIdentifierName_424(declaration_436.name));
  }
  let namedExports_438 = bindings_437.map(binding_440 => {
    return new _terms2.default("ExportSpecifier", { name: null, exportedName: binding_440 });
  });
  return new _terms2.default("ExportFrom", { moduleSpecifier: null, namedExports: (0, _immutable.List)(namedExports_438) });
};
const pragmaRegep_426 = /^\s*#\w*/;
class Modules_427 {
  constructor(context_441) {
    this.compiledModules = new Map();
    this.context = context_441;
    this.context.modules = this;
  }
  loadString(str_442) {
    let checkPragma_443 = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

    let hasPragma_444 = pragmaRegep_426.test(str_442);
    if (checkPragma_443 && !hasPragma_444) {
      return { isNative: true, body: (0, _immutable.List)() };
    }
    return { isNative: !hasPragma_444, body: new _shiftReader2.default(str_442).read() };
  }
  load(path_445) {
    return this.loadString(this.context.moduleLoader(path_445));
  }
  compile(mod_446, path_447) {
    let stxl_448 = mod_446.body;
    let outScope_449 = (0, _scope.freshScope)("outsideEdge");
    let inScope_450 = (0, _scope.freshScope)(`insideEdge0`);
    let compiler_451 = new _compiler2.default(0, new _env2.default(), new _store2.default(), _.merge(this.context, { currentScope: [outScope_449, inScope_450], cwd: path_447 === "<<entrypoint>>" ? this.context.cwd : (0, _utilsDirname2.default)(path_447) }));
    let terms_452 = compiler_451.compile(stxl_448.map(s_457 => s_457.addScope(outScope_449, this.context.bindings, _syntax.ALL_PHASES).addScope(inScope_450, this.context.bindings, 0)));
    let importEntries_453 = [];
    let exportEntries_454 = [];
    let pragmas_455 = [];
    let filteredTerms_456 = terms_452.reduce((acc_458, t_459) => {
      return _.cond([[_terms.isImport, t_460 => {
        importEntries_453.push(t_460);
        return acc_458;
      }], [_terms.isExport, t_461 => {
        if (t_461.declaration) {
          exportEntries_454.push(convertExport_425(t_461));
          if ((0, _terms.isVariableDeclaration)(t_461.declaration)) {
            return acc_458.concat(new _terms2.default("VariableDeclarationStatement", { declaration: t_461.declaration }));
          }
          return acc_458.concat(t_461.declaration);
        }
        exportEntries_454.push(t_461);
        return acc_458;
      }], [_terms.isPragma, t_462 => {
        pragmas_455.push(t_462);
        return acc_458;
      }], [_.T, t_463 => acc_458.concat(t_463)]])(t_459);
    }, (0, _immutable.List)());
    return new Module_423(path_447, mod_446.isNative, (0, _immutable.List)(importEntries_453), (0, _immutable.List)(exportEntries_454), (0, _immutable.List)(pragmas_455), filteredTerms_456);
  }
  compileEntrypoint(source_464, filename_465) {
    let enforcePragma_466 = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

    let stxl_467 = this.loadString(source_464, false);
    if (enforcePragma_466 && stxl_467.isNative) {
      throw new Error(`Entrypoint ${ filename_465 } must begin with #lang pragma`);
    }
    return this.getAtPhase("<<entrypoint>>", 0, this.context.cwd, stxl_467);
  }
  getAtPhase(rawPath_468, phase_469, cwd_470) {
    let rawStxl_471 = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];

    let path_472 = rawPath_468 === "<<entrypoint>>" ? rawPath_468 : this.context.moduleResolver(rawPath_468, cwd_470);
    let mapKey_473 = `${ path_472 }:${ phase_469 }`;
    if (!this.compiledModules.has(mapKey_473)) {
      if (phase_469 === 0) {
        let stxl = rawStxl_471 != null ? rawStxl_471 : this.load(path_472);
        this.compiledModules.set(mapKey_473, this.compile(stxl, path_472));
      } else {
        let rawMod = this.getAtPhase(rawPath_468, 0, cwd_470, rawStxl_471);
        let scope = (0, _scope.freshScope)(`insideEdge${ phase_469 }`);
        this.compiledModules.set(mapKey_473, new Module_423(rawMod.moduleSpecifier, false, rawMod.importEntries.map(term_474 => term_474.addScope(scope, this.context.bindings, phase_469)), rawMod.exportEntries.map(term_475 => term_475.addScope(scope, this.context.bindings, phase_469)), rawMod.pragmas, rawMod.body.map(term_476 => term_476.addScope(scope, this.context.bindings, phase_469))));
      }
    }
    return this.compiledModules.get(mapKey_473);
  }
  has(rawPath_477) {
    let phase_478 = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];

    let path_479 = rawPath_477 === "<<entrypoint>>" ? rawPath_477 : this.context.moduleResolver(rawPath_477, this.context.cwd);
    let key_480 = `${ path_479 }:${ phase_478 }`;
    return this.compiledModules.has(key_480) && !this.compiledModules.get(key_480).isNative;
  }
  registerSyntaxDeclaration(term_481, phase_482, store_483) {
    term_481.declarators.forEach(decl_484 => {
      let val_485 = (0, _loadSyntax.evalCompiletimeValue)(decl_484.init.gen(), _.merge(this.context, { phase: phase_482 + 1, store: store_483 }));
      (0, _hygieneUtils.collectBindings)(decl_484.binding).forEach(stx_486 => {
        if (phase_482 !== 0) {
          let newBinding = (0, _symbol.gensym)(stx_486.val());
          this.context.bindings.add(stx_486, { binding: newBinding, phase: phase_482, skipDup: false });
        }
        let resolvedName_487 = stx_486.resolve(phase_482);
        store_483.set(resolvedName_487, new _transforms.CompiletimeTransform(val_485));
      });
    });
  }
  registerVariableDeclaration(term_488, phase_489, store_490) {
    term_488.declarators.forEach(decl_491 => {
      (0, _hygieneUtils.collectBindings)(decl_491.binding).forEach(stx_492 => {
        if (phase_489 !== 0) {
          let newBinding = (0, _symbol.gensym)(stx_492.val());
          this.context.bindings.add(stx_492, { binding: newBinding, phase: phase_489, skipDup: term_488.kind === "var" });
        }
        let resolvedName_493 = stx_492.resolve(phase_489);
        store_490.set(resolvedName_493, new _transforms.VarBindingTransform(stx_492));
      });
    });
  }
  registerFunctionOrClass(term_494, phase_495, store_496) {
    (0, _hygieneUtils.collectBindings)(term_494.name).forEach(stx_497 => {
      if (phase_495 !== 0) {
        let newBinding = (0, _symbol.gensym)(stx_497.val());
        this.context.bindings.add(stx_497, { binding: newBinding, phase: phase_495, skipDup: false });
      }
      let resolvedName_498 = stx_497.resolve(phase_495);
      store_496.set(resolvedName_498, new _transforms.VarBindingTransform(stx_497));
    });
  }
  visit(mod_499, phase_500, store_501) {
    mod_499.body.forEach(term_502 => {
      if ((0, _terms.isSyntaxDeclarationStatement)(term_502)) {
        this.registerSyntaxDeclaration(term_502.declaration, phase_500, store_501);
      }
    });
    return store_501;
  }
  invoke(mod_503, phase_504, store_505) {
    let body_506 = mod_503.body.filter(_.complement(_terms.isCompiletimeStatement)).map(term_508 => {
      term_508 = term_508.gen();
      if ((0, _terms.isVariableDeclarationStatement)(term_508)) {
        this.registerVariableDeclaration(term_508.declaration, phase_504, store_505);
      } else if ((0, _terms.isFunctionDeclaration)(term_508)) {
        this.registerFunctionOrClass(term_508, phase_504, store_505);
      }
      return term_508;
    });
    let exportsObj_507 = (0, _loadSyntax.evalRuntimeValues)(body_506, _.merge(this.context, { store: store_505, phase: phase_504 }));
    return store_505;
  }
}
exports.Module = Module_423;
exports.Modules = Modules_427;
//# sourceMappingURL=data:application/json;base64,