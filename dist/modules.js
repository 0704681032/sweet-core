"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Modules = exports.Module = undefined;

var _immutable = require("immutable");

var _env = require("./env");

var _env2 = _interopRequireDefault(_env);

var _store = require("./store");

var _store2 = _interopRequireDefault(_store);

var _shiftReader = require("./shift-reader");

var _shiftReader2 = _interopRequireDefault(_shiftReader);

var _tokenExpander = require("./token-expander.js");

var _tokenExpander2 = _interopRequireDefault(_tokenExpander);

var _termExpander = require("./term-expander.js");

var _termExpander2 = _interopRequireDefault(_termExpander);

var _bindingMap = require("./binding-map.js");

var _bindingMap2 = _interopRequireDefault(_bindingMap);

var _symbol = require("./symbol");

var _terms = require("./terms");

var _terms2 = _interopRequireDefault(_terms);

var _loadSyntax = require("./load-syntax");

var _compiler = require("./compiler");

var _compiler2 = _interopRequireDefault(_compiler);

var _transforms = require("./transforms");

var _scope = require("./scope");

var _errors = require("./errors");

var _hygieneUtils = require("./hygiene-utils");

var _syntax = require("./syntax");

var _utilsDirname = require("utils-dirname");

var _utilsDirname2 = _interopRequireDefault(_utilsDirname);

var _ramda = require("ramda");

var _ = _interopRequireWildcard(_ramda);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Module_463 {
  constructor(moduleSpecifier_468, isNative_469, importEntries_470, exportEntries_471, pragmas_472, body_473) {
    this.moduleSpecifier = moduleSpecifier_468;
    this.isNative = isNative_469;
    this.importEntries = importEntries_470;
    this.exportEntries = exportEntries_471;
    this.pragmas = pragmas_472;
    this.body = body_473;
  }
}
const findBindingIdentifierName_464 = term_474 => {
  (0, _errors.assert)(term_474.name, `not implemented yet for type ${ term_474.type }`);
  return term_474.name;
};
const convertExport_465 = term_475 => {
  let declaration_476 = term_475.declaration;
  let bindings_477 = [];
  if ((0, _terms.isVariableDeclaration)(declaration_476)) {
    bindings_477 = declaration_476.declarators.map(decl_479 => findBindingIdentifierName_464(decl_479.binding));
  } else if ((0, _terms.isFunctionDeclaration)(declaration_476) || (0, _terms.isClassDeclaration)(declaration_476)) {
    bindings_477.push(findBindingIdentifierName_464(declaration_476.name));
  }
  let namedExports_478 = bindings_477.map(binding_480 => {
    return new _terms2.default("ExportSpecifier", { name: null, exportedName: binding_480 });
  });
  return new _terms2.default("ExportFrom", { moduleSpecifier: null, namedExports: (0, _immutable.List)(namedExports_478) });
};
const pragmaRegep_466 = /^\s*#\w*/;
class Modules_467 {
  constructor(context_481) {
    this.compiledModules = new Map();
    this.context = context_481;
    this.context.modules = this;
  }
  loadString(str_482) {
    let checkPragma_483 = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

    let hasPragma_484 = pragmaRegep_466.test(str_482);
    if (checkPragma_483 && !hasPragma_484) {
      return { isNative: true, body: (0, _immutable.List)() };
    }
    return { isNative: !hasPragma_484, body: new _shiftReader2.default(str_482).read() };
  }
  load(path_485) {
    return this.loadString(this.context.moduleLoader(path_485));
  }
  compile(mod_486, path_487) {
    let stxl_488 = mod_486.body;
    let outScope_489 = (0, _scope.freshScope)("outsideEdge");
    let inScope_490 = (0, _scope.freshScope)(`insideEdge0`);
    let compiler_491 = new _compiler2.default(0, new _env2.default(), new _store2.default(), _.merge(this.context, { currentScope: [outScope_489, inScope_490], cwd: path_487 === "<<entrypoint>>" ? this.context.cwd : (0, _utilsDirname2.default)(path_487) }));
    let terms_492 = compiler_491.compile(stxl_488.map(s_497 => s_497.addScope(outScope_489, this.context.bindings, _syntax.ALL_PHASES).addScope(inScope_490, this.context.bindings, 0)));
    let importEntries_493 = [];
    let exportEntries_494 = [];
    let pragmas_495 = [];
    let filteredTerms_496 = terms_492.reduce((acc_498, t_499) => {
      return _.cond([[_terms.isImport, t_500 => {
        importEntries_493.push(t_500);
        return acc_498;
      }], [_terms.isExport, t_501 => {
        if (t_501.declaration) {
          exportEntries_494.push(convertExport_465(t_501));
          if ((0, _terms.isVariableDeclaration)(t_501.declaration)) {
            return acc_498.concat(new _terms2.default("VariableDeclarationStatement", { declaration: t_501.declaration }));
          }
          return acc_498.concat(t_501.declaration);
        }
        exportEntries_494.push(t_501);
        return acc_498;
      }], [_terms.isPragma, t_502 => {
        pragmas_495.push(t_502);
        return acc_498;
      }], [_.T, t_503 => acc_498.concat(t_503)]])(t_499);
    }, (0, _immutable.List)());
    return new Module_463(path_487, mod_486.isNative, (0, _immutable.List)(importEntries_493), (0, _immutable.List)(exportEntries_494), (0, _immutable.List)(pragmas_495), filteredTerms_496);
  }
  compileEntrypoint(source_504, filename_505) {
    let enforcePragma_506 = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

    let stxl_507 = this.loadString(source_504, false);
    if (enforcePragma_506 && stxl_507.isNative) {
      throw new Error(`Entrypoint ${ filename_505 } must begin with #lang pragma`);
    }
    return this.getAtPhase("<<entrypoint>>", 0, this.context.cwd, stxl_507);
  }
  getAtPhase(rawPath_508, phase_509, cwd_510) {
    let rawStxl_511 = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];

    let path_512 = rawPath_508 === "<<entrypoint>>" ? rawPath_508 : this.context.moduleResolver(rawPath_508, cwd_510);
    let mapKey_513 = `${ path_512 }:${ phase_509 }`;
    if (!this.compiledModules.has(mapKey_513)) {
      if (phase_509 === 0) {
        let stxl = rawStxl_511 != null ? rawStxl_511 : this.load(path_512);
        this.compiledModules.set(mapKey_513, this.compile(stxl, path_512));
      } else {
        let rawMod = this.getAtPhase(rawPath_508, 0, cwd_510, rawStxl_511);
        let scope = (0, _scope.freshScope)(`insideEdge${ phase_509 }`);
        this.compiledModules.set(mapKey_513, new Module_463(rawMod.moduleSpecifier, false, rawMod.importEntries.map(term_514 => term_514.addScope(scope, this.context.bindings, phase_509)), rawMod.exportEntries.map(term_515 => term_515.addScope(scope, this.context.bindings, phase_509)), rawMod.pragmas, rawMod.body.map(term_516 => term_516.addScope(scope, this.context.bindings, phase_509))));
      }
    }
    return this.compiledModules.get(mapKey_513);
  }
  has(rawPath_517) {
    let phase_518 = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];

    let path_519 = rawPath_517 === "<<entrypoint>>" ? rawPath_517 : this.context.moduleResolver(rawPath_517, this.context.cwd);
    let key_520 = `${ path_519 }:${ phase_518 }`;
    return this.compiledModules.has(key_520) && !this.compiledModules.get(key_520).isNative;
  }
  registerSyntaxDeclaration(term_521, phase_522, store_523) {
    term_521.declarators.forEach(decl_524 => {
      let val_525 = (0, _loadSyntax.evalCompiletimeValue)(decl_524.init.gen(), _.merge(this.context, { phase: phase_522 + 1, store: store_523 }));
      (0, _hygieneUtils.collectBindings)(decl_524.binding).forEach(stx_526 => {
        if (phase_522 !== 0) {
          let newBinding = (0, _symbol.gensym)(stx_526.val());
          this.context.bindings.add(stx_526, { binding: newBinding, phase: phase_522, skipDup: false });
        }
        let resolvedName_527 = stx_526.resolve(phase_522);
        store_523.set(resolvedName_527, new _transforms.CompiletimeTransform(val_525));
      });
    });
  }
  registerVariableDeclaration(term_528, phase_529, store_530) {
    term_528.declarators.forEach(decl_531 => {
      (0, _hygieneUtils.collectBindings)(decl_531.binding).forEach(stx_532 => {
        if (phase_529 !== 0) {
          let newBinding = (0, _symbol.gensym)(stx_532.val());
          this.context.bindings.add(stx_532, { binding: newBinding, phase: phase_529, skipDup: term_528.kind === "var" });
        }
        let resolvedName_533 = stx_532.resolve(phase_529);
        store_530.set(resolvedName_533, new _transforms.VarBindingTransform(stx_532));
      });
    });
  }
  registerFunctionOrClass(term_534, phase_535, store_536) {
    (0, _hygieneUtils.collectBindings)(term_534.name).forEach(stx_537 => {
      if (phase_535 !== 0) {
        let newBinding = (0, _symbol.gensym)(stx_537.val());
        this.context.bindings.add(stx_537, { binding: newBinding, phase: phase_535, skipDup: false });
      }
      let resolvedName_538 = stx_537.resolve(phase_535);
      store_536.set(resolvedName_538, new _transforms.VarBindingTransform(stx_537));
    });
  }
  visit(mod_539, phase_540, store_541) {
    mod_539.body.forEach(term_542 => {
      if ((0, _terms.isSyntaxDeclarationStatement)(term_542)) {
        this.registerSyntaxDeclaration(term_542.declaration, phase_540, store_541);
      }
    });
    return store_541;
  }
  invoke(mod_543, phase_544, store_545) {
    let body_546 = mod_543.body.filter(_.complement(_terms.isCompiletimeStatement)).map(term_548 => {
      term_548 = term_548.gen();
      if ((0, _terms.isVariableDeclarationStatement)(term_548)) {
        this.registerVariableDeclaration(term_548.declaration, phase_544, store_545);
      } else if ((0, _terms.isFunctionDeclaration)(term_548)) {
        this.registerFunctionOrClass(term_548, phase_544, store_545);
      }
      return term_548;
    });
    let exportsObj_547 = (0, _loadSyntax.evalRuntimeValues)(body_546, _.merge(this.context, { store: store_545, phase: phase_544 }));
    return store_545;
  }
}
exports.Module = Module_463;
exports.Modules = Modules_467;
//# sourceMappingURL=data:application/json;base64,