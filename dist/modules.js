"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Modules = exports.Module = undefined;

var _immutable = require("immutable");

var _env = require("./env");

var _env2 = _interopRequireDefault(_env);

var _store = require("./store");

var _store2 = _interopRequireDefault(_store);

var _shiftReader = require("./shift-reader");

var _shiftReader2 = _interopRequireDefault(_shiftReader);

var _tokenExpander = require("./token-expander.js");

var _tokenExpander2 = _interopRequireDefault(_tokenExpander);

var _termExpander = require("./term-expander.js");

var _termExpander2 = _interopRequireDefault(_termExpander);

var _bindingMap = require("./binding-map.js");

var _bindingMap2 = _interopRequireDefault(_bindingMap);

var _symbol = require("./symbol");

var _terms = require("./terms");

var _terms2 = _interopRequireDefault(_terms);

var _loadSyntax = require("./load-syntax");

var _compiler = require("./compiler");

var _compiler2 = _interopRequireDefault(_compiler);

var _transforms = require("./transforms");

var _scope = require("./scope");

var _errors = require("./errors");

var _hygieneUtils = require("./hygiene-utils");

var _syntax = require("./syntax");

var _utilsDirname = require("utils-dirname");

var _utilsDirname2 = _interopRequireDefault(_utilsDirname);

var _ramda = require("ramda");

var _ = _interopRequireWildcard(_ramda);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Module_432 {
  constructor(moduleSpecifier_437, isNative_438, importEntries_439, exportEntries_440, pragmas_441, body_442) {
    this.moduleSpecifier = moduleSpecifier_437;
    this.isNative = isNative_438;
    this.importEntries = importEntries_439;
    this.exportEntries = exportEntries_440;
    this.pragmas = pragmas_441;
    this.body = body_442;
  }
}
const findBindingIdentifierName_433 = term_443 => {
  (0, _errors.assert)(term_443.name, `not implemented yet for type ${ term_443.type }`);
  return term_443.name;
};
const convertExport_434 = term_444 => {
  let declaration_445 = term_444.declaration;
  let bindings_446 = [];
  if ((0, _terms.isVariableDeclaration)(declaration_445)) {
    bindings_446 = declaration_445.declarators.map(decl_448 => findBindingIdentifierName_433(decl_448.binding));
  } else if ((0, _terms.isFunctionDeclaration)(declaration_445) || (0, _terms.isClassDeclaration)(declaration_445)) {
    bindings_446.push(findBindingIdentifierName_433(declaration_445.name));
  }
  let namedExports_447 = bindings_446.map(binding_449 => {
    return new _terms2.default("ExportSpecifier", { name: null, exportedName: binding_449 });
  });
  return new _terms2.default("ExportFrom", { moduleSpecifier: null, namedExports: (0, _immutable.List)(namedExports_447) });
};
const pragmaRegep_435 = /^\s*#\w*/;
class Modules_436 {
  constructor(context_450) {
    this.compiledModules = new Map();
    this.context = context_450;
    this.context.modules = this;
  }
  loadString(str_451) {
    let checkPragma_452 = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

    let hasPragma_453 = pragmaRegep_435.test(str_451);
    if (checkPragma_452 && !hasPragma_453) {
      return { isNative: true, body: (0, _immutable.List)() };
    }
    return { isNative: !hasPragma_453, body: new _shiftReader2.default(str_451).read() };
  }
  load(path_454) {
    return this.loadString(this.context.moduleLoader(path_454));
  }
  compile(mod_455, path_456) {
    let stxl_457 = mod_455.body;
    let outScope_458 = (0, _scope.freshScope)("outsideEdge");
    let inScope_459 = (0, _scope.freshScope)(`insideEdge0`);
    let compiler_460 = new _compiler2.default(0, new _env2.default(), new _store2.default(), _.merge(this.context, { currentScope: [outScope_458, inScope_459], cwd: path_456 === "<<entrypoint>>" ? this.context.cwd : (0, _utilsDirname2.default)(path_456) }));
    let terms_461 = compiler_460.compile(stxl_457.map(s_466 => s_466.addScope(outScope_458, this.context.bindings, _syntax.ALL_PHASES).addScope(inScope_459, this.context.bindings, 0)));
    let importEntries_462 = [];
    let exportEntries_463 = [];
    let pragmas_464 = [];
    let filteredTerms_465 = terms_461.reduce((acc_467, t_468) => {
      return _.cond([[_terms.isImport, t_469 => {
        importEntries_462.push(t_469);
        return acc_467;
      }], [_terms.isExport, t_470 => {
        if (t_470.declaration) {
          exportEntries_463.push(convertExport_434(t_470));
          if ((0, _terms.isVariableDeclaration)(t_470.declaration)) {
            return acc_467.concat(new _terms2.default("VariableDeclarationStatement", { declaration: t_470.declaration }));
          }
          return acc_467.concat(t_470.declaration);
        }
        exportEntries_463.push(t_470);
        return acc_467;
      }], [_terms.isPragma, t_471 => {
        pragmas_464.push(t_471);
        return acc_467;
      }], [_.T, t_472 => acc_467.concat(t_472)]])(t_468);
    }, (0, _immutable.List)());
    return new Module_432(path_456, mod_455.isNative, (0, _immutable.List)(importEntries_462), (0, _immutable.List)(exportEntries_463), (0, _immutable.List)(pragmas_464), filteredTerms_465);
  }
  compileEntrypoint(source_473, filename_474) {
    let enforcePragma_475 = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

    let stxl_476 = this.loadString(source_473, false);
    if (enforcePragma_475 && stxl_476.isNative) {
      throw new Error(`Entrypoint ${ filename_474 } must begin with #lang pragma`);
    }
    return this.getAtPhase("<<entrypoint>>", 0, this.context.cwd, stxl_476);
  }
  getAtPhase(rawPath_477, phase_478, cwd_479) {
    let rawStxl_480 = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];

    let path_481 = rawPath_477 === "<<entrypoint>>" ? rawPath_477 : this.context.moduleResolver(rawPath_477, cwd_479);
    let mapKey_482 = `${ path_481 }:${ phase_478 }`;
    if (!this.compiledModules.has(mapKey_482)) {
      if (phase_478 === 0) {
        let stxl = rawStxl_480 != null ? rawStxl_480 : this.load(path_481);
        this.compiledModules.set(mapKey_482, this.compile(stxl, path_481));
      } else {
        let rawMod = this.getAtPhase(rawPath_477, 0, cwd_479, rawStxl_480);
        let scope = (0, _scope.freshScope)(`insideEdge${ phase_478 }`);
        this.compiledModules.set(mapKey_482, new Module_432(rawMod.moduleSpecifier, false, rawMod.importEntries.map(term_483 => term_483.addScope(scope, this.context.bindings, phase_478)), rawMod.exportEntries.map(term_484 => term_484.addScope(scope, this.context.bindings, phase_478)), rawMod.pragmas, rawMod.body.map(term_485 => term_485.addScope(scope, this.context.bindings, phase_478))));
      }
    }
    return this.compiledModules.get(mapKey_482);
  }
  has(rawPath_486) {
    let phase_487 = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];

    let path_488 = rawPath_486 === "<<entrypoint>>" ? rawPath_486 : this.context.moduleResolver(rawPath_486, this.context.cwd);
    let key_489 = `${ path_488 }:${ phase_487 }`;
    return this.compiledModules.has(key_489) && !this.compiledModules.get(key_489).isNative;
  }
  registerSyntaxDeclaration(term_490, phase_491, store_492) {
    term_490.declarators.forEach(decl_493 => {
      let val_494 = (0, _loadSyntax.evalCompiletimeValue)(decl_493.init.gen(), _.merge(this.context, { phase: phase_491 + 1, store: store_492 }));
      (0, _hygieneUtils.collectBindings)(decl_493.binding).forEach(stx_495 => {
        if (phase_491 !== 0) {
          let newBinding = (0, _symbol.gensym)(stx_495.val());
          this.context.bindings.add(stx_495, { binding: newBinding, phase: phase_491, skipDup: false });
        }
        let resolvedName_496 = stx_495.resolve(phase_491);
        store_492.set(resolvedName_496, new _transforms.CompiletimeTransform(val_494));
      });
    });
  }
  registerVariableDeclaration(term_497, phase_498, store_499) {
    term_497.declarators.forEach(decl_500 => {
      (0, _hygieneUtils.collectBindings)(decl_500.binding).forEach(stx_501 => {
        if (phase_498 !== 0) {
          let newBinding = (0, _symbol.gensym)(stx_501.val());
          this.context.bindings.add(stx_501, { binding: newBinding, phase: phase_498, skipDup: term_497.kind === "var" });
        }
        let resolvedName_502 = stx_501.resolve(phase_498);
        store_499.set(resolvedName_502, new _transforms.VarBindingTransform(stx_501));
      });
    });
  }
  registerFunctionOrClass(term_503, phase_504, store_505) {
    (0, _hygieneUtils.collectBindings)(term_503.name).forEach(stx_506 => {
      if (phase_504 !== 0) {
        let newBinding = (0, _symbol.gensym)(stx_506.val());
        this.context.bindings.add(stx_506, { binding: newBinding, phase: phase_504, skipDup: false });
      }
      let resolvedName_507 = stx_506.resolve(phase_504);
      store_505.set(resolvedName_507, new _transforms.VarBindingTransform(stx_506));
    });
  }
  visit(mod_508, phase_509, store_510) {
    mod_508.body.forEach(term_511 => {
      if ((0, _terms.isSyntaxDeclarationStatement)(term_511)) {
        this.registerSyntaxDeclaration(term_511.declaration, phase_509, store_510);
      }
    });
    return store_510;
  }
  invoke(mod_512, phase_513, store_514) {
    let body_515 = mod_512.body.filter(_.complement(_terms.isCompiletimeStatement)).map(term_517 => {
      term_517 = term_517.gen();
      if ((0, _terms.isVariableDeclarationStatement)(term_517)) {
        this.registerVariableDeclaration(term_517.declaration, phase_513, store_514);
      } else if ((0, _terms.isFunctionDeclaration)(term_517)) {
        this.registerFunctionOrClass(term_517, phase_513, store_514);
      }
      return term_517;
    });
    let exportsObj_516 = (0, _loadSyntax.evalRuntimeValues)(body_515, _.merge(this.context, { store: store_514, phase: phase_513 }));
    return store_514;
  }
}
exports.Module = Module_432;
exports.Modules = Modules_436;
//# sourceMappingURL=data:application/json;base64,