"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _immutable = require("immutable");

var _enforester = require("./enforester");

var _termExpander = require("./term-expander.js");

var _termExpander2 = _interopRequireDefault(_termExpander);

var _bindingMap = require("./binding-map.js");

var _bindingMap2 = _interopRequireDefault(_bindingMap);

var _env = require("./env");

var _env2 = _interopRequireDefault(_env);

var _shiftReader = require("./shift-reader");

var _shiftReader2 = _interopRequireDefault(_shiftReader);

var _terms = require("./terms");

var _terms2 = _interopRequireDefault(_terms);

var _symbol = require("./symbol");

var _transforms = require("./transforms");

var _errors = require("./errors");

var _loadSyntax = require("./load-syntax");

var _scope = require("./scope");

var _syntax = require("./syntax");

var _syntax2 = _interopRequireDefault(_syntax);

var _astDispatcher = require("./ast-dispatcher");

var _astDispatcher2 = _interopRequireDefault(_astDispatcher);

var _hygieneUtils = require("./hygiene-utils");

var _ramda = require("ramda");

var _ = _interopRequireWildcard(_ramda);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function bindImports_1372(impTerm_1375, exModule_1376, context_1377) {
  let names_1378 = [];
  let phase_1379 = impTerm_1375.forSyntax ? context_1377.phase + 1 : context_1377.phase;
  impTerm_1375.namedImports.forEach(specifier_1380 => {
    let name_1381 = specifier_1380.binding.name;
    let exportName_1382 = findNameInExports_1373(name_1381, exModule_1376.exportEntries);
    if (exportName_1382 != null) {
      let newBinding = (0, _symbol.gensym)(name_1381.val());
      context_1377.store.set(newBinding.toString(), new _transforms.VarBindingTransform(name_1381));
      context_1377.bindings.addForward(name_1381, exportName_1382, newBinding, phase_1379);
      names_1378.push(name_1381);
    }
  });
  return (0, _immutable.List)(names_1378);
}
function findNameInExports_1373(name_1383, exp_1384) {
  let foundNames_1385 = exp_1384.reduce((acc_1386, e_1387) => {
    if ((0, _terms.isExportFrom)(e_1387)) {
      return acc_1386.concat(e_1387.namedExports.reduce((acc_1388, specifier_1389) => {
        if (specifier_1389.exportedName.val() === name_1383.val()) {
          return acc_1388.concat(specifier_1389.exportedName);
        }
        return acc_1388;
      }, (0, _immutable.List)()));
    } else if ((0, _terms.isExport)(e_1387)) {
      return acc_1386.concat(e_1387.declaration.declarators.reduce((acc_1390, decl_1391) => {
        if (decl_1391.binding.name.val() === name_1383.val()) {
          return acc_1390.concat(decl_1391.binding.name);
        }
        return acc_1390;
      }, (0, _immutable.List)()));
    }
    return acc_1386;
  }, (0, _immutable.List)());
  (0, _errors.assert)(foundNames_1385.size <= 1, "expecting no more than 1 matching name in exports");
  return foundNames_1385.get(0);
}
function removeNames_1374(impTerm_1392, names_1393) {
  let namedImports_1394 = impTerm_1392.namedImports.filter(specifier_1395 => !names_1393.contains(specifier_1395.binding.name));
  return impTerm_1392.extend({ namedImports: namedImports_1394 });
}
class TokenExpander extends _astDispatcher2.default {
  constructor(context_1396) {
    super("expand", false);
    this.context = context_1396;
  }
  expand(stxl_1397) {
    let result_1398 = [];
    if (stxl_1397.size === 0) {
      return (0, _immutable.List)(result_1398);
    }
    let prev_1399 = (0, _immutable.List)();
    let enf_1400 = new _enforester.Enforester(stxl_1397, prev_1399, this.context);
    while (!enf_1400.done) {
      result_1398.push(this.dispatch(enf_1400.enforest()));
    }
    return (0, _immutable.List)(result_1398);
  }
  expandVariableDeclarationStatement(term_1401) {
    return term_1401.extend({ declaration: this.registerVariableDeclaration(term_1401.declaration) });
  }
  expandFunctionDeclaration(term_1402) {
    let registeredTerm_1403 = this.registerFunctionOrClass(term_1402);
    let stx_1404 = registeredTerm_1403.name.name;
    this.context.env.set(stx_1404.resolve(this.context.phase), new _transforms.VarBindingTransform(stx_1404));
    return registeredTerm_1403;
  }
  expandImport(term_1405) {
    let path_1406 = term_1405.moduleSpecifier.val();
    let mod_1407;
    if (term_1405.forSyntax) {
      mod_1407 = this.context.modules.getAtPhase(path_1406, this.context.phase + 1, this.context.cwd);
      this.context.store = this.context.modules.visit(mod_1407, this.context.phase + 1, this.context.store);
      this.context.store = this.context.modules.invoke(mod_1407, this.context.phase + 1, this.context.store);
    } else {
      mod_1407 = this.context.modules.getAtPhase(path_1406, this.context.phase, this.context.cwd);
      this.context.store = this.context.modules.visit(mod_1407, this.context.phase, this.context.store);
    }
    let boundNames_1408 = bindImports_1372(term_1405, mod_1407, this.context);
    return removeNames_1374(term_1405, boundNames_1408);
  }
  expandExport(term_1409) {
    if ((0, _terms.isFunctionDeclaration)(term_1409.declaration) || (0, _terms.isClassDeclaration)(term_1409.declaration)) {
      return term_1409.extend({ declaration: this.registerFunctionOrClass(term_1409.declaration) });
    } else if ((0, _terms.isVariableDeclaration)(term_1409.declaration)) {
      return term_1409.extend({ declaration: this.registerVariableDeclaration(term_1409.declaration) });
    }
    return term_1409;
  }
  registerFunctionOrClass(term_1410) {
    let name_1411 = term_1410.name.removeScope(this.context.useScope, this.context.phase);
    (0, _hygieneUtils.collectBindings)(term_1410.name).forEach(stx_1412 => {
      let newBinding_1413 = (0, _symbol.gensym)(stx_1412.val());
      this.context.bindings.add(stx_1412, { binding: newBinding_1413, phase: this.context.phase, skipDup: false });
      this.context.env.set(newBinding_1413.toString(), new _transforms.VarBindingTransform(stx_1412));
    });
    return term_1410.extend({ name: name_1411 });
  }
  registerVariableDeclaration(term_1414) {
    if ((0, _terms.isSyntaxDeclaration)(term_1414) || (0, _terms.isSyntaxrecDeclaration)(term_1414)) {
      return this.registerSyntaxDeclaration(term_1414);
    }
    return term_1414.extend({ declarators: term_1414.declarators.map(decl_1415 => {
        let binding_1416 = decl_1415.binding.removeScope(this.context.useScope, this.context.phase);
        (0, _hygieneUtils.collectBindings)(binding_1416).forEach(stx_1417 => {
          let newBinding_1418 = (0, _symbol.gensym)(stx_1417.val());
          this.context.bindings.add(stx_1417, { binding: newBinding_1418, phase: this.context.phase, skipDup: term_1414.kind === "var" });
          this.context.env.set(newBinding_1418.toString(), new _transforms.VarBindingTransform(stx_1417));
        });
        return decl_1415.extend({ binding: binding_1416 });
      }) });
  }
  registerSyntaxDeclaration(term_1419) {
    if ((0, _terms.isSyntaxDeclaration)(term_1419)) {
      let scope = (0, _scope.freshScope)("nonrec");
      term_1419 = term_1419.extend({ declarators: term_1419.declarators.map(decl_1420 => {
          let name_1421 = decl_1420.binding.name;
          let nameAdded_1422 = name_1421.addScope(scope, this.context.bindings, _syntax.ALL_PHASES);
          let nameRemoved_1423 = name_1421.removeScope(this.context.currentScope[this.context.currentScope.length - 1], this.context.phase);
          let newBinding_1424 = (0, _symbol.gensym)(name_1421.val());
          this.context.bindings.addForward(nameAdded_1422, nameRemoved_1423, newBinding_1424, this.context.phase);
          return decl_1420.extend({ init: decl_1420.init.addScope(scope, this.context.bindings, _syntax.ALL_PHASES) });
        }) });
    }
    return term_1419.extend({ declarators: term_1419.declarators.map(decl_1425 => {
        let binding_1426 = decl_1425.binding.removeScope(this.context.useScope, this.context.phase);
        let syntaxExpander_1427 = new _termExpander2.default(_.merge(this.context, { phase: this.context.phase + 1, env: new _env2.default(), store: this.context.store }));
        let init_1428 = syntaxExpander_1427.expand(decl_1425.init);
        let val_1429 = (0, _loadSyntax.evalCompiletimeValue)(init_1428.gen(), _.merge(this.context, { phase: this.context.phase + 1 }));
        (0, _hygieneUtils.collectBindings)(binding_1426).forEach(stx_1430 => {
          let newBinding_1431 = (0, _symbol.gensym)(stx_1430.val());
          this.context.bindings.add(stx_1430, { binding: newBinding_1431, phase: this.context.phase, skipDup: false });
          let resolvedName_1432 = stx_1430.resolve(this.context.phase);
          this.context.env.set(resolvedName_1432, new _transforms.CompiletimeTransform(val_1429));
        });
        return decl_1425.extend({ binding: binding_1426, init: init_1428 });
      }) });
  }
}
exports.default = TokenExpander;
//# sourceMappingURL=data:application/json;base64,