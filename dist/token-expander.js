"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _immutable = require("immutable");

var _enforester = require("./enforester");

var _termExpander = require("./term-expander.js");

var _termExpander2 = _interopRequireDefault(_termExpander);

var _bindingMap = require("./binding-map.js");

var _bindingMap2 = _interopRequireDefault(_bindingMap);

var _env = require("./env");

var _env2 = _interopRequireDefault(_env);

var _shiftReader = require("./shift-reader");

var _shiftReader2 = _interopRequireDefault(_shiftReader);

var _terms = require("./terms");

var _terms2 = _interopRequireDefault(_terms);

var _symbol = require("./symbol");

var _transforms = require("./transforms");

var _errors = require("./errors");

var _loadSyntax = require("./load-syntax");

var _scope = require("./scope");

var _syntax = require("./syntax");

var _syntax2 = _interopRequireDefault(_syntax);

var _astDispatcher = require("./ast-dispatcher");

var _astDispatcher2 = _interopRequireDefault(_astDispatcher);

var _hygieneUtils = require("./hygiene-utils");

var _ramda = require("ramda");

var _ = _interopRequireWildcard(_ramda);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function bindImports_1205(impTerm_1208, exModule_1209, context_1210) {
  let names_1211 = [];
  let phase_1212 = impTerm_1208.forSyntax ? context_1210.phase + 1 : context_1210.phase;
  impTerm_1208.namedImports.forEach(specifier_1213 => {
    let name_1214 = specifier_1213.binding.name;
    let exportName_1215 = findNameInExports_1206(name_1214, exModule_1209.exportEntries);
    if (exportName_1215 != null) {
      let newBinding = (0, _symbol.gensym)(name_1214.val());
      context_1210.store.set(newBinding.toString(), new _transforms.VarBindingTransform(name_1214));
      context_1210.bindings.addForward(name_1214, exportName_1215, newBinding, phase_1212);
      names_1211.push(name_1214);
    }
  });
  return (0, _immutable.List)(names_1211);
}
function findNameInExports_1206(name_1216, exp_1217) {
  let foundNames_1218 = exp_1217.reduce((acc_1219, e_1220) => {
    if ((0, _terms.isExportFrom)(e_1220)) {
      return acc_1219.concat(e_1220.namedExports.reduce((acc_1221, specifier_1222) => {
        if (specifier_1222.exportedName.val() === name_1216.val()) {
          return acc_1221.concat(specifier_1222.exportedName);
        }
        return acc_1221;
      }, (0, _immutable.List)()));
    } else if ((0, _terms.isExport)(e_1220)) {
      return acc_1219.concat(e_1220.declaration.declarators.reduce((acc_1223, decl_1224) => {
        if (decl_1224.binding.name.val() === name_1216.val()) {
          return acc_1223.concat(decl_1224.binding.name);
        }
        return acc_1223;
      }, (0, _immutable.List)()));
    }
    return acc_1219;
  }, (0, _immutable.List)());
  (0, _errors.assert)(foundNames_1218.size <= 1, "expecting no more than 1 matching name in exports");
  return foundNames_1218.get(0);
}
function removeNames_1207(impTerm_1225, names_1226) {
  let namedImports_1227 = impTerm_1225.namedImports.filter(specifier_1228 => !names_1226.contains(specifier_1228.binding.name));
  return impTerm_1225.extend({ namedImports: namedImports_1227 });
}
class TokenExpander extends _astDispatcher2.default {
  constructor(context_1229) {
    super("expand", false);
    this.context = context_1229;
  }
  expand(stxl_1230) {
    let result_1231 = [];
    if (stxl_1230.size === 0) {
      return (0, _immutable.List)(result_1231);
    }
    let prev_1232 = (0, _immutable.List)();
    let enf_1233 = new _enforester.Enforester(stxl_1230, prev_1232, this.context);
    while (!enf_1233.done) {
      result_1231.push(this.dispatch(enf_1233.enforest()));
    }
    return (0, _immutable.List)(result_1231);
  }
  expandVariableDeclarationStatement(term_1234) {
    return term_1234.extend({ declaration: this.registerVariableDeclaration(term_1234.declaration) });
  }
  expandFunctionDeclaration(term_1235) {
    let registeredTerm_1236 = this.registerFunctionOrClass(term_1235);
    let stx_1237 = registeredTerm_1236.name.name;
    this.context.env.set(stx_1237.resolve(this.context.phase), new _transforms.VarBindingTransform(stx_1237));
    return registeredTerm_1236;
  }
  expandImport(term_1238) {
    let path_1239 = term_1238.moduleSpecifier.val();
    let mod_1240;
    if (term_1238.forSyntax) {
      mod_1240 = this.context.modules.getAtPhase(path_1239, this.context.phase + 1);
      this.context.store = this.context.modules.visit(mod_1240, this.context.phase + 1, this.context.store);
      this.context.store = this.context.modules.invoke(mod_1240, this.context.phase + 1, this.context.store);
    } else {
      mod_1240 = this.context.modules.getAtPhase(path_1239, this.context.phase);
      this.context.store = this.context.modules.visit(mod_1240, this.context.phase, this.context.store);
    }
    let boundNames_1241 = bindImports_1205(term_1238, mod_1240, this.context);
    return removeNames_1207(term_1238, boundNames_1241);
  }
  expandExport(term_1242) {
    if ((0, _terms.isFunctionDeclaration)(term_1242.declaration) || (0, _terms.isClassDeclaration)(term_1242.declaration)) {
      return term_1242.extend({ declaration: this.registerFunctionOrClass(term_1242.declaration) });
    } else if ((0, _terms.isVariableDeclaration)(term_1242.declaration)) {
      return term_1242.extend({ declaration: this.registerVariableDeclaration(term_1242.declaration) });
    }
    return term_1242;
  }
  registerFunctionOrClass(term_1243) {
    let name_1244 = term_1243.name.removeScope(this.context.useScope, this.context.phase);
    (0, _hygieneUtils.collectBindings)(term_1243.name).forEach(stx_1245 => {
      let newBinding_1246 = (0, _symbol.gensym)(stx_1245.val());
      this.context.bindings.add(stx_1245, { binding: newBinding_1246, phase: this.context.phase, skipDup: false });
      this.context.env.set(newBinding_1246.toString(), new _transforms.VarBindingTransform(stx_1245));
    });
    return term_1243.extend({ name: name_1244 });
  }
  registerVariableDeclaration(term_1247) {
    if ((0, _terms.isSyntaxDeclaration)(term_1247) || (0, _terms.isSyntaxrecDeclaration)(term_1247)) {
      return this.registerSyntaxDeclaration(term_1247);
    }
    return term_1247.extend({ declarators: term_1247.declarators.map(decl_1248 => {
        let binding_1249 = decl_1248.binding.removeScope(this.context.useScope, this.context.phase);
        (0, _hygieneUtils.collectBindings)(binding_1249).forEach(stx_1250 => {
          let newBinding_1251 = (0, _symbol.gensym)(stx_1250.val());
          this.context.bindings.add(stx_1250, { binding: newBinding_1251, phase: this.context.phase, skipDup: term_1247.kind === "var" });
          this.context.env.set(newBinding_1251.toString(), new _transforms.VarBindingTransform(stx_1250));
        });
        return decl_1248.extend({ binding: binding_1249 });
      }) });
  }
  registerSyntaxDeclaration(term_1252) {
    if ((0, _terms.isSyntaxDeclaration)(term_1252)) {
      let scope = (0, _scope.freshScope)("nonrec");
      term_1252 = term_1252.extend({ declarators: term_1252.declarators.map(decl_1253 => {
          let name_1254 = decl_1253.binding.name;
          let nameAdded_1255 = name_1254.addScope(scope, this.context.bindings, _syntax.ALL_PHASES);
          let nameRemoved_1256 = name_1254.removeScope(this.context.currentScope[this.context.currentScope.length - 1], this.context.phase);
          let newBinding_1257 = (0, _symbol.gensym)(name_1254.val());
          this.context.bindings.addForward(nameAdded_1255, nameRemoved_1256, newBinding_1257, this.context.phase);
          return decl_1253.extend({ init: decl_1253.init.addScope(scope, this.context.bindings, _syntax.ALL_PHASES) });
        }) });
    }
    return term_1252.extend({ declarators: term_1252.declarators.map(decl_1258 => {
        let binding_1259 = decl_1258.binding.removeScope(this.context.useScope, this.context.phase);
        let syntaxExpander_1260 = new _termExpander2.default(_.merge(this.context, { phase: this.context.phase + 1, env: new _env2.default(), store: this.context.store }));
        let init_1261 = syntaxExpander_1260.expand(decl_1258.init);
        let val_1262 = (0, _loadSyntax.evalCompiletimeValue)(init_1261.gen(), _.merge(this.context, { phase: this.context.phase + 1 }));
        (0, _hygieneUtils.collectBindings)(binding_1259).forEach(stx_1263 => {
          let newBinding_1264 = (0, _symbol.gensym)(stx_1263.val());
          this.context.bindings.add(stx_1263, { binding: newBinding_1264, phase: this.context.phase, skipDup: false });
          let resolvedName_1265 = stx_1263.resolve(this.context.phase);
          this.context.env.set(resolvedName_1265, new _transforms.CompiletimeTransform(val_1262));
        });
        return decl_1258.extend({ binding: binding_1259, init: init_1261 });
      }) });
  }
}
exports.default = TokenExpander;
//# sourceMappingURL=data:application/json;base64,