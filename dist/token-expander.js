"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _immutable = require("immutable");

var _enforester = require("./enforester");

var _termExpander = require("./term-expander.js");

var _termExpander2 = _interopRequireDefault(_termExpander);

var _bindingMap = require("./binding-map.js");

var _bindingMap2 = _interopRequireDefault(_bindingMap);

var _env = require("./env");

var _env2 = _interopRequireDefault(_env);

var _shiftReader = require("./shift-reader");

var _shiftReader2 = _interopRequireDefault(_shiftReader);

var _terms = require("./terms");

var _terms2 = _interopRequireDefault(_terms);

var _symbol = require("./symbol");

var _transforms = require("./transforms");

var _errors = require("./errors");

var _loadSyntax = require("./load-syntax");

var _scope = require("./scope");

var _syntax = require("./syntax");

var _syntax2 = _interopRequireDefault(_syntax);

var _astDispatcher = require("./ast-dispatcher");

var _astDispatcher2 = _interopRequireDefault(_astDispatcher);

var _hygieneUtils = require("./hygiene-utils");

var _ramda = require("ramda");

var _ = _interopRequireWildcard(_ramda);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function bindImports_1215(impTerm_1218, exModule_1219, context_1220) {
  let names_1221 = [];
  let phase_1222 = impTerm_1218.forSyntax ? context_1220.phase + 1 : context_1220.phase;
  impTerm_1218.namedImports.forEach(specifier_1223 => {
    let name_1224 = specifier_1223.binding.name;
    let exportName_1225 = findNameInExports_1216(name_1224, exModule_1219.exportEntries);
    if (exportName_1225 != null) {
      let newBinding = (0, _symbol.gensym)(name_1224.val());
      context_1220.store.set(newBinding.toString(), new _transforms.VarBindingTransform(name_1224));
      context_1220.bindings.addForward(name_1224, exportName_1225, newBinding, phase_1222);
      names_1221.push(name_1224);
    }
  });
  return (0, _immutable.List)(names_1221);
}
function findNameInExports_1216(name_1226, exp_1227) {
  let foundNames_1228 = exp_1227.reduce((acc_1229, e_1230) => {
    if ((0, _terms.isExportFrom)(e_1230)) {
      return acc_1229.concat(e_1230.namedExports.reduce((acc_1231, specifier_1232) => {
        if (specifier_1232.exportedName.val() === name_1226.val()) {
          return acc_1231.concat(specifier_1232.exportedName);
        }
        return acc_1231;
      }, (0, _immutable.List)()));
    } else if ((0, _terms.isExport)(e_1230)) {
      return acc_1229.concat(e_1230.declaration.declarators.reduce((acc_1233, decl_1234) => {
        if (decl_1234.binding.name.val() === name_1226.val()) {
          return acc_1233.concat(decl_1234.binding.name);
        }
        return acc_1233;
      }, (0, _immutable.List)()));
    }
    return acc_1229;
  }, (0, _immutable.List)());
  (0, _errors.assert)(foundNames_1228.size <= 1, "expecting no more than 1 matching name in exports");
  return foundNames_1228.get(0);
}
function removeNames_1217(impTerm_1235, names_1236) {
  let namedImports_1237 = impTerm_1235.namedImports.filter(specifier_1238 => !names_1236.contains(specifier_1238.binding.name));
  return impTerm_1235.extend({ namedImports: namedImports_1237 });
}
class TokenExpander extends _astDispatcher2.default {
  constructor(context_1239) {
    super("expand", false);
    this.context = context_1239;
  }
  expand(stxl_1240) {
    let result_1241 = [];
    if (stxl_1240.size === 0) {
      return (0, _immutable.List)(result_1241);
    }
    let prev_1242 = (0, _immutable.List)();
    let enf_1243 = new _enforester.Enforester(stxl_1240, prev_1242, this.context);
    while (!enf_1243.done) {
      result_1241.push(this.dispatch(enf_1243.enforest()));
    }
    return (0, _immutable.List)(result_1241);
  }
  expandVariableDeclarationStatement(term_1244) {
    return term_1244.extend({ declaration: this.registerVariableDeclaration(term_1244.declaration) });
  }
  expandFunctionDeclaration(term_1245) {
    let registeredTerm_1246 = this.registerFunctionOrClass(term_1245);
    let stx_1247 = registeredTerm_1246.name.name;
    this.context.env.set(stx_1247.resolve(this.context.phase), new _transforms.VarBindingTransform(stx_1247));
    return registeredTerm_1246;
  }
  expandImport(term_1248) {
    let path_1249 = term_1248.moduleSpecifier.val();
    let mod_1250;
    if (term_1248.forSyntax) {
      mod_1250 = this.context.modules.getAtPhase(path_1249, this.context.phase + 1, this.context.cwd);
      this.context.store = this.context.modules.visit(mod_1250, this.context.phase + 1, this.context.store);
      this.context.store = this.context.modules.invoke(mod_1250, this.context.phase + 1, this.context.store);
    } else {
      mod_1250 = this.context.modules.getAtPhase(path_1249, this.context.phase, this.context.cwd);
      this.context.store = this.context.modules.visit(mod_1250, this.context.phase, this.context.store);
    }
    let boundNames_1251 = bindImports_1215(term_1248, mod_1250, this.context);
    return removeNames_1217(term_1248, boundNames_1251);
  }
  expandExport(term_1252) {
    if ((0, _terms.isFunctionDeclaration)(term_1252.declaration) || (0, _terms.isClassDeclaration)(term_1252.declaration)) {
      return term_1252.extend({ declaration: this.registerFunctionOrClass(term_1252.declaration) });
    } else if ((0, _terms.isVariableDeclaration)(term_1252.declaration)) {
      return term_1252.extend({ declaration: this.registerVariableDeclaration(term_1252.declaration) });
    }
    return term_1252;
  }
  registerFunctionOrClass(term_1253) {
    let name_1254 = term_1253.name.removeScope(this.context.useScope, this.context.phase);
    (0, _hygieneUtils.collectBindings)(term_1253.name).forEach(stx_1255 => {
      let newBinding_1256 = (0, _symbol.gensym)(stx_1255.val());
      this.context.bindings.add(stx_1255, { binding: newBinding_1256, phase: this.context.phase, skipDup: false });
      this.context.env.set(newBinding_1256.toString(), new _transforms.VarBindingTransform(stx_1255));
    });
    return term_1253.extend({ name: name_1254 });
  }
  registerVariableDeclaration(term_1257) {
    if ((0, _terms.isSyntaxDeclaration)(term_1257) || (0, _terms.isSyntaxrecDeclaration)(term_1257)) {
      return this.registerSyntaxDeclaration(term_1257);
    }
    return term_1257.extend({ declarators: term_1257.declarators.map(decl_1258 => {
        let binding_1259 = decl_1258.binding.removeScope(this.context.useScope, this.context.phase);
        (0, _hygieneUtils.collectBindings)(binding_1259).forEach(stx_1260 => {
          let newBinding_1261 = (0, _symbol.gensym)(stx_1260.val());
          this.context.bindings.add(stx_1260, { binding: newBinding_1261, phase: this.context.phase, skipDup: term_1257.kind === "var" });
          this.context.env.set(newBinding_1261.toString(), new _transforms.VarBindingTransform(stx_1260));
        });
        return decl_1258.extend({ binding: binding_1259 });
      }) });
  }
  registerSyntaxDeclaration(term_1262) {
    if ((0, _terms.isSyntaxDeclaration)(term_1262)) {
      let scope = (0, _scope.freshScope)("nonrec");
      term_1262 = term_1262.extend({ declarators: term_1262.declarators.map(decl_1263 => {
          let name_1264 = decl_1263.binding.name;
          let nameAdded_1265 = name_1264.addScope(scope, this.context.bindings, _syntax.ALL_PHASES);
          let nameRemoved_1266 = name_1264.removeScope(this.context.currentScope[this.context.currentScope.length - 1], this.context.phase);
          let newBinding_1267 = (0, _symbol.gensym)(name_1264.val());
          this.context.bindings.addForward(nameAdded_1265, nameRemoved_1266, newBinding_1267, this.context.phase);
          return decl_1263.extend({ init: decl_1263.init.addScope(scope, this.context.bindings, _syntax.ALL_PHASES) });
        }) });
    }
    return term_1262.extend({ declarators: term_1262.declarators.map(decl_1268 => {
        let binding_1269 = decl_1268.binding.removeScope(this.context.useScope, this.context.phase);
        let syntaxExpander_1270 = new _termExpander2.default(_.merge(this.context, { phase: this.context.phase + 1, env: new _env2.default(), store: this.context.store }));
        let init_1271 = syntaxExpander_1270.expand(decl_1268.init);
        let val_1272 = (0, _loadSyntax.evalCompiletimeValue)(init_1271.gen(), _.merge(this.context, { phase: this.context.phase + 1 }));
        (0, _hygieneUtils.collectBindings)(binding_1269).forEach(stx_1273 => {
          let newBinding_1274 = (0, _symbol.gensym)(stx_1273.val());
          this.context.bindings.add(stx_1273, { binding: newBinding_1274, phase: this.context.phase, skipDup: false });
          let resolvedName_1275 = stx_1273.resolve(this.context.phase);
          this.context.env.set(resolvedName_1275, new _transforms.CompiletimeTransform(val_1272));
        });
        return decl_1268.extend({ binding: binding_1269, init: init_1271 });
      }) });
  }
}
exports.default = TokenExpander;
//# sourceMappingURL=data:application/json;base64,