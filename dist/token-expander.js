"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _immutable = require("immutable");

var _enforester = require("./enforester");

var _termExpander = require("./term-expander.js");

var _termExpander2 = _interopRequireDefault(_termExpander);

var _bindingMap = require("./binding-map.js");

var _bindingMap2 = _interopRequireDefault(_bindingMap);

var _env = require("./env");

var _env2 = _interopRequireDefault(_env);

var _shiftReader = require("./shift-reader");

var _shiftReader2 = _interopRequireDefault(_shiftReader);

var _terms = require("./terms");

var _terms2 = _interopRequireDefault(_terms);

var _symbol = require("./symbol");

var _transforms = require("./transforms");

var _errors = require("./errors");

var _loadSyntax = require("./load-syntax");

var _scope = require("./scope");

var _syntax = require("./syntax");

var _syntax2 = _interopRequireDefault(_syntax);

var _astDispatcher = require("./ast-dispatcher");

var _astDispatcher2 = _interopRequireDefault(_astDispatcher);

var _hygieneUtils = require("./hygiene-utils");

var _ramda = require("ramda");

var _ = _interopRequireWildcard(_ramda);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function bindImports_1357(impTerm_1360, exModule_1361, context_1362) {
  let names_1363 = [];
  let phase_1364 = impTerm_1360.forSyntax ? context_1362.phase + 1 : context_1362.phase;
  impTerm_1360.namedImports.forEach(specifier_1365 => {
    let name_1366 = specifier_1365.binding.name;
    let exportName_1367 = findNameInExports_1358(name_1366, exModule_1361.exportEntries);
    if (exportName_1367 != null) {
      let newBinding = (0, _symbol.gensym)(name_1366.val());
      context_1362.store.set(newBinding.toString(), new _transforms.VarBindingTransform(name_1366));
      context_1362.bindings.addForward(name_1366, exportName_1367, newBinding, phase_1364);
      names_1363.push(name_1366);
    }
  });
  return (0, _immutable.List)(names_1363);
}
function findNameInExports_1358(name_1368, exp_1369) {
  let foundNames_1370 = exp_1369.reduce((acc_1371, e_1372) => {
    if ((0, _terms.isExportFrom)(e_1372)) {
      return acc_1371.concat(e_1372.namedExports.reduce((acc_1373, specifier_1374) => {
        if (specifier_1374.exportedName.val() === name_1368.val()) {
          return acc_1373.concat(specifier_1374.exportedName);
        }
        return acc_1373;
      }, (0, _immutable.List)()));
    } else if ((0, _terms.isExport)(e_1372)) {
      return acc_1371.concat(e_1372.declaration.declarators.reduce((acc_1375, decl_1376) => {
        if (decl_1376.binding.name.val() === name_1368.val()) {
          return acc_1375.concat(decl_1376.binding.name);
        }
        return acc_1375;
      }, (0, _immutable.List)()));
    }
    return acc_1371;
  }, (0, _immutable.List)());
  (0, _errors.assert)(foundNames_1370.size <= 1, "expecting no more than 1 matching name in exports");
  return foundNames_1370.get(0);
}
function removeNames_1359(impTerm_1377, names_1378) {
  let namedImports_1379 = impTerm_1377.namedImports.filter(specifier_1380 => !names_1378.contains(specifier_1380.binding.name));
  return impTerm_1377.extend({ namedImports: namedImports_1379 });
}
class TokenExpander extends _astDispatcher2.default {
  constructor(context_1381) {
    super("expand", false);
    this.context = context_1381;
  }
  expand(stxl_1382) {
    let result_1383 = [];
    if (stxl_1382.size === 0) {
      return (0, _immutable.List)(result_1383);
    }
    let prev_1384 = (0, _immutable.List)();
    let enf_1385 = new _enforester.Enforester(stxl_1382, prev_1384, this.context);
    while (!enf_1385.done) {
      result_1383.push(this.dispatch(enf_1385.enforest()));
    }
    return (0, _immutable.List)(result_1383);
  }
  expandVariableDeclarationStatement(term_1386) {
    return term_1386.extend({ declaration: this.registerVariableDeclaration(term_1386.declaration) });
  }
  expandFunctionDeclaration(term_1387) {
    let registeredTerm_1388 = this.registerFunctionOrClass(term_1387);
    let stx_1389 = registeredTerm_1388.name.name;
    this.context.env.set(stx_1389.resolve(this.context.phase), new _transforms.VarBindingTransform(stx_1389));
    return registeredTerm_1388;
  }
  expandImport(term_1390) {
    let path_1391 = term_1390.moduleSpecifier.val();
    let mod_1392;
    if (term_1390.forSyntax) {
      mod_1392 = this.context.modules.getAtPhase(path_1391, this.context.phase + 1, this.context.cwd);
      this.context.store = this.context.modules.visit(mod_1392, this.context.phase + 1, this.context.store);
      this.context.store = this.context.modules.invoke(mod_1392, this.context.phase + 1, this.context.store);
    } else {
      mod_1392 = this.context.modules.getAtPhase(path_1391, this.context.phase, this.context.cwd);
      this.context.store = this.context.modules.visit(mod_1392, this.context.phase, this.context.store);
    }
    let boundNames_1393 = bindImports_1357(term_1390, mod_1392, this.context);
    return removeNames_1359(term_1390, boundNames_1393);
  }
  expandExport(term_1394) {
    if ((0, _terms.isFunctionDeclaration)(term_1394.declaration) || (0, _terms.isClassDeclaration)(term_1394.declaration)) {
      return term_1394.extend({ declaration: this.registerFunctionOrClass(term_1394.declaration) });
    } else if ((0, _terms.isVariableDeclaration)(term_1394.declaration)) {
      return term_1394.extend({ declaration: this.registerVariableDeclaration(term_1394.declaration) });
    }
    return term_1394;
  }
  registerFunctionOrClass(term_1395) {
    let name_1396 = term_1395.name.removeScope(this.context.useScope, this.context.phase);
    (0, _hygieneUtils.collectBindings)(term_1395.name).forEach(stx_1397 => {
      let newBinding_1398 = (0, _symbol.gensym)(stx_1397.val());
      this.context.bindings.add(stx_1397, { binding: newBinding_1398, phase: this.context.phase, skipDup: false });
      this.context.env.set(newBinding_1398.toString(), new _transforms.VarBindingTransform(stx_1397));
    });
    return term_1395.extend({ name: name_1396 });
  }
  registerVariableDeclaration(term_1399) {
    if ((0, _terms.isSyntaxDeclaration)(term_1399) || (0, _terms.isSyntaxrecDeclaration)(term_1399)) {
      return this.registerSyntaxDeclaration(term_1399);
    }
    return term_1399.extend({ declarators: term_1399.declarators.map(decl_1400 => {
        let binding_1401 = decl_1400.binding.removeScope(this.context.useScope, this.context.phase);
        (0, _hygieneUtils.collectBindings)(binding_1401).forEach(stx_1402 => {
          let newBinding_1403 = (0, _symbol.gensym)(stx_1402.val());
          this.context.bindings.add(stx_1402, { binding: newBinding_1403, phase: this.context.phase, skipDup: term_1399.kind === "var" });
          this.context.env.set(newBinding_1403.toString(), new _transforms.VarBindingTransform(stx_1402));
        });
        return decl_1400.extend({ binding: binding_1401 });
      }) });
  }
  registerSyntaxDeclaration(term_1404) {
    if ((0, _terms.isSyntaxDeclaration)(term_1404)) {
      let scope = (0, _scope.freshScope)("nonrec");
      term_1404 = term_1404.extend({ declarators: term_1404.declarators.map(decl_1405 => {
          let name_1406 = decl_1405.binding.name;
          let nameAdded_1407 = name_1406.addScope(scope, this.context.bindings, _syntax.ALL_PHASES);
          let nameRemoved_1408 = name_1406.removeScope(this.context.currentScope[this.context.currentScope.length - 1], this.context.phase);
          let newBinding_1409 = (0, _symbol.gensym)(name_1406.val());
          this.context.bindings.addForward(nameAdded_1407, nameRemoved_1408, newBinding_1409, this.context.phase);
          return decl_1405.extend({ init: decl_1405.init.addScope(scope, this.context.bindings, _syntax.ALL_PHASES) });
        }) });
    }
    return term_1404.extend({ declarators: term_1404.declarators.map(decl_1410 => {
        let binding_1411 = decl_1410.binding.removeScope(this.context.useScope, this.context.phase);
        let syntaxExpander_1412 = new _termExpander2.default(_.merge(this.context, { phase: this.context.phase + 1, env: new _env2.default(), store: this.context.store }));
        let init_1413 = syntaxExpander_1412.expand(decl_1410.init);
        let val_1414 = (0, _loadSyntax.evalCompiletimeValue)(init_1413.gen(), _.merge(this.context, { phase: this.context.phase + 1 }));
        (0, _hygieneUtils.collectBindings)(binding_1411).forEach(stx_1415 => {
          let newBinding_1416 = (0, _symbol.gensym)(stx_1415.val());
          this.context.bindings.add(stx_1415, { binding: newBinding_1416, phase: this.context.phase, skipDup: false });
          let resolvedName_1417 = stx_1415.resolve(this.context.phase);
          this.context.env.set(resolvedName_1417, new _transforms.CompiletimeTransform(val_1414));
        });
        return decl_1410.extend({ binding: binding_1411, init: init_1413 });
      }) });
  }
}
exports.default = TokenExpander;
//# sourceMappingURL=data:application/json;base64,