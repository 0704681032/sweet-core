"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _immutable = require("immutable");

var _enforester = require("./enforester");

var _termExpander = require("./term-expander.js");

var _termExpander2 = _interopRequireDefault(_termExpander);

var _bindingMap = require("./binding-map.js");

var _bindingMap2 = _interopRequireDefault(_bindingMap);

var _env = require("./env");

var _env2 = _interopRequireDefault(_env);

var _shiftReader = require("./shift-reader");

var _shiftReader2 = _interopRequireDefault(_shiftReader);

var _terms = require("./terms");

var _terms2 = _interopRequireDefault(_terms);

var _symbol = require("./symbol");

var _transforms = require("./transforms");

var _errors = require("./errors");

var _loadSyntax = require("./load-syntax");

var _scope = require("./scope");

var _syntax = require("./syntax");

var _syntax2 = _interopRequireDefault(_syntax);

var _astDispatcher = require("./ast-dispatcher");

var _astDispatcher2 = _interopRequireDefault(_astDispatcher);

var _hygieneUtils = require("./hygiene-utils");

var _ramda = require("ramda");

var _ = _interopRequireWildcard(_ramda);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function bindImports_1356(impTerm_1359, exModule_1360, context_1361) {
  let names_1362 = [];
  let phase_1363 = impTerm_1359.forSyntax ? context_1361.phase + 1 : context_1361.phase;
  impTerm_1359.namedImports.forEach(specifier_1364 => {
    let name_1365 = specifier_1364.binding.name;
    let exportName_1366 = findNameInExports_1357(name_1365, exModule_1360.exportEntries);
    if (exportName_1366 != null) {
      let newBinding = (0, _symbol.gensym)(name_1365.val());
      context_1361.store.set(newBinding.toString(), new _transforms.VarBindingTransform(name_1365));
      context_1361.bindings.addForward(name_1365, exportName_1366, newBinding, phase_1363);
      names_1362.push(name_1365);
    }
  });
  return (0, _immutable.List)(names_1362);
}
function findNameInExports_1357(name_1367, exp_1368) {
  let foundNames_1369 = exp_1368.reduce((acc_1370, e_1371) => {
    if ((0, _terms.isExportFrom)(e_1371)) {
      return acc_1370.concat(e_1371.namedExports.reduce((acc_1372, specifier_1373) => {
        if (specifier_1373.exportedName.val() === name_1367.val()) {
          return acc_1372.concat(specifier_1373.exportedName);
        }
        return acc_1372;
      }, (0, _immutable.List)()));
    } else if ((0, _terms.isExport)(e_1371)) {
      return acc_1370.concat(e_1371.declaration.declarators.reduce((acc_1374, decl_1375) => {
        if (decl_1375.binding.name.val() === name_1367.val()) {
          return acc_1374.concat(decl_1375.binding.name);
        }
        return acc_1374;
      }, (0, _immutable.List)()));
    }
    return acc_1370;
  }, (0, _immutable.List)());
  (0, _errors.assert)(foundNames_1369.size <= 1, "expecting no more than 1 matching name in exports");
  return foundNames_1369.get(0);
}
function removeNames_1358(impTerm_1376, names_1377) {
  let namedImports_1378 = impTerm_1376.namedImports.filter(specifier_1379 => !names_1377.contains(specifier_1379.binding.name));
  return impTerm_1376.extend({ namedImports: namedImports_1378 });
}
class TokenExpander extends _astDispatcher2.default {
  constructor(context_1380) {
    super("expand", false);
    this.context = context_1380;
  }
  expand(stxl_1381) {
    let result_1382 = [];
    if (stxl_1381.size === 0) {
      return (0, _immutable.List)(result_1382);
    }
    let prev_1383 = (0, _immutable.List)();
    let enf_1384 = new _enforester.Enforester(stxl_1381, prev_1383, this.context);
    while (!enf_1384.done) {
      result_1382.push(this.dispatch(enf_1384.enforest()));
    }
    return (0, _immutable.List)(result_1382);
  }
  expandVariableDeclarationStatement(term_1385) {
    return term_1385.extend({ declaration: this.registerVariableDeclaration(term_1385.declaration) });
  }
  expandFunctionDeclaration(term_1386) {
    let registeredTerm_1387 = this.registerFunctionOrClass(term_1386);
    let stx_1388 = registeredTerm_1387.name.name;
    this.context.env.set(stx_1388.resolve(this.context.phase), new _transforms.VarBindingTransform(stx_1388));
    return registeredTerm_1387;
  }
  expandImport(term_1389) {
    let path_1390 = term_1389.moduleSpecifier.val();
    let mod_1391;
    if (term_1389.forSyntax) {
      mod_1391 = this.context.modules.getAtPhase(path_1390, this.context.phase + 1, this.context.cwd);
      this.context.store = this.context.modules.visit(mod_1391, this.context.phase + 1, this.context.store);
      this.context.store = this.context.modules.invoke(mod_1391, this.context.phase + 1, this.context.store);
    } else {
      mod_1391 = this.context.modules.getAtPhase(path_1390, this.context.phase, this.context.cwd);
      this.context.store = this.context.modules.visit(mod_1391, this.context.phase, this.context.store);
    }
    let boundNames_1392 = bindImports_1356(term_1389, mod_1391, this.context);
    return removeNames_1358(term_1389, boundNames_1392);
  }
  expandExport(term_1393) {
    if ((0, _terms.isFunctionDeclaration)(term_1393.declaration) || (0, _terms.isClassDeclaration)(term_1393.declaration)) {
      return term_1393.extend({ declaration: this.registerFunctionOrClass(term_1393.declaration) });
    } else if ((0, _terms.isVariableDeclaration)(term_1393.declaration)) {
      return term_1393.extend({ declaration: this.registerVariableDeclaration(term_1393.declaration) });
    }
    return term_1393;
  }
  registerFunctionOrClass(term_1394) {
    let name_1395 = term_1394.name.removeScope(this.context.useScope, this.context.phase);
    (0, _hygieneUtils.collectBindings)(term_1394.name).forEach(stx_1396 => {
      let newBinding_1397 = (0, _symbol.gensym)(stx_1396.val());
      this.context.bindings.add(stx_1396, { binding: newBinding_1397, phase: this.context.phase, skipDup: false });
      this.context.env.set(newBinding_1397.toString(), new _transforms.VarBindingTransform(stx_1396));
    });
    return term_1394.extend({ name: name_1395 });
  }
  registerVariableDeclaration(term_1398) {
    if ((0, _terms.isSyntaxDeclaration)(term_1398) || (0, _terms.isSyntaxrecDeclaration)(term_1398)) {
      return this.registerSyntaxDeclaration(term_1398);
    }
    return term_1398.extend({ declarators: term_1398.declarators.map(decl_1399 => {
        let binding_1400 = decl_1399.binding.removeScope(this.context.useScope, this.context.phase);
        (0, _hygieneUtils.collectBindings)(binding_1400).forEach(stx_1401 => {
          let newBinding_1402 = (0, _symbol.gensym)(stx_1401.val());
          this.context.bindings.add(stx_1401, { binding: newBinding_1402, phase: this.context.phase, skipDup: term_1398.kind === "var" });
          this.context.env.set(newBinding_1402.toString(), new _transforms.VarBindingTransform(stx_1401));
        });
        return decl_1399.extend({ binding: binding_1400 });
      }) });
  }
  registerSyntaxDeclaration(term_1403) {
    if ((0, _terms.isSyntaxDeclaration)(term_1403)) {
      let scope = (0, _scope.freshScope)("nonrec");
      term_1403 = term_1403.extend({ declarators: term_1403.declarators.map(decl_1404 => {
          let name_1405 = decl_1404.binding.name;
          let nameAdded_1406 = name_1405.addScope(scope, this.context.bindings, _syntax.ALL_PHASES);
          let nameRemoved_1407 = name_1405.removeScope(this.context.currentScope[this.context.currentScope.length - 1], this.context.phase);
          let newBinding_1408 = (0, _symbol.gensym)(name_1405.val());
          this.context.bindings.addForward(nameAdded_1406, nameRemoved_1407, newBinding_1408, this.context.phase);
          return decl_1404.extend({ init: decl_1404.init.addScope(scope, this.context.bindings, _syntax.ALL_PHASES) });
        }) });
    }
    return term_1403.extend({ declarators: term_1403.declarators.map(decl_1409 => {
        let binding_1410 = decl_1409.binding.removeScope(this.context.useScope, this.context.phase);
        let syntaxExpander_1411 = new _termExpander2.default(_.merge(this.context, { phase: this.context.phase + 1, env: new _env2.default(), store: this.context.store }));
        let init_1412 = syntaxExpander_1411.expand(decl_1409.init);
        let val_1413 = (0, _loadSyntax.evalCompiletimeValue)(init_1412.gen(), _.merge(this.context, { phase: this.context.phase + 1 }));
        (0, _hygieneUtils.collectBindings)(binding_1410).forEach(stx_1414 => {
          let newBinding_1415 = (0, _symbol.gensym)(stx_1414.val());
          this.context.bindings.add(stx_1414, { binding: newBinding_1415, phase: this.context.phase, skipDup: false });
          let resolvedName_1416 = stx_1414.resolve(this.context.phase);
          this.context.env.set(resolvedName_1416, new _transforms.CompiletimeTransform(val_1413));
        });
        return decl_1409.extend({ binding: binding_1410, init: init_1412 });
      }) });
  }
}
exports.default = TokenExpander;
//# sourceMappingURL=data:application/json;base64,