"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _tokenizer = require("shift-parser/dist/tokenizer");

var _tokenizer2 = _interopRequireDefault(_tokenizer);

var _immutable = require("immutable");

var _syntax = require("./syntax");

var _syntax2 = _interopRequireDefault(_syntax);

var _ramdaFantasy = require("ramda-fantasy");

var _errors = require("./errors");

var _terms = require("./terms");

var _terms2 = _interopRequireDefault(_terms);

var _ramda = require("ramda");

var R = _interopRequireWildcard(_ramda);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const Just_615 = _ramdaFantasy.Maybe.Just;
const Nothing_616 = _ramdaFantasy.Maybe.Nothing;
const LSYNTAX_617 = { name: "left-syntax" };
const RSYNTAX_618 = { name: "right-syntax" };
const AT_619 = { klass: _tokenizer.TokenClass.Punctuator, name: "@" };
const literalKeywords_620 = ["this", "null", "true", "false"];
const isLeftBracket_621 = R.whereEq({ type: _tokenizer.TokenType.LBRACK });
const isLeftBrace_622 = R.whereEq({ type: _tokenizer.TokenType.LBRACE });
const isLeftParen_623 = R.whereEq({ type: _tokenizer.TokenType.LPAREN });
const isRightBracket_624 = R.whereEq({ type: _tokenizer.TokenType.RBRACK });
const isRightBrace_625 = R.whereEq({ type: _tokenizer.TokenType.RBRACE });
const isRightParen_626 = R.whereEq({ type: _tokenizer.TokenType.RPAREN });
const isEOS_627 = R.whereEq({ type: _tokenizer.TokenType.EOS });
const isHash_628 = R.whereEq({ type: _tokenizer.TokenType.IDENTIFIER, value: "#" });
const isLeftSyntax_629 = R.whereEq({ type: LSYNTAX_617 });
const isRightSyntax_630 = R.whereEq({ type: RSYNTAX_618 });
const isLeftDelimiter_631 = R.anyPass([isLeftBracket_621, isLeftBrace_622, isLeftParen_623, isLeftSyntax_629]);
const isRightDelimiter_632 = R.anyPass([isRightBracket_624, isRightBrace_625, isRightParen_626, isRightSyntax_630]);
const isMatchingDelimiters_633 = R.cond([[isLeftBracket_621, (__674, b_675) => isRightBracket_624(b_675)], [isLeftBrace_622, (__676, b_677) => isRightBrace_625(b_677)], [isLeftParen_623, (__678, b_679) => isRightParen_626(b_679)], [isLeftSyntax_629, (__680, b_681) => isRightSyntax_630(b_681)], [R.T, R.F]]);
const assignOps_634 = ["=", "+=", "-=", "*=", "/=", "%=", "<<=", ">>=", ">>>=", "&=", "|=", "^=", ","];
const binaryOps_635 = ["+", "-", "*", "/", "%", "<<", ">>", ">>>", "&", "|", "^", "&&", "||", "?", ":", "===", "==", ">=", "<=", "<", ">", "!=", "!==", "instanceof"];
const unaryOps_636 = ["++", "--", "~", "!", "delete", "void", "typeof", "yield", "throw", "new"];
const isEmpty_637 = R.whereEq({ size: 0 });
const isPunctuator_638 = s_682 => s_682.match("punctuator");
const isKeyword_639 = s_683 => s_683.match("keyword");
const isDelimiter_640 = s_684 => s_684.match("delimiter");
const isParens_641 = s_685 => s_685.match("parens");
const isBraces_642 = s_686 => s_686.match("braces");
const isBrackets_643 = s_687 => s_687.match("brackets");
const isIdentifier_644 = s_688 => s_688.match("identifier");
const val_645 = s_689 => s_689.val();
const isVal_646 = R.curry((v_690, s_691) => s_691.val() === v_690);
const isDot_647 = R.allPass([isPunctuator_638, isVal_646(".")]);
const isColon_648 = R.allPass([isPunctuator_638, isVal_646(":")]);
const isFunctionKeyword_649 = R.allPass([isKeyword_639, isVal_646("function")]);
const isOperator_650 = s_692 => (s_692.match("punctuator") || s_692.match("keyword")) && R.any(R.equals(s_692.val()), assignOps_634.concat(binaryOps_635).concat(unaryOps_636));
const isNonLiteralKeyword_651 = R.allPass([isKeyword_639, s_693 => R.none(R.equals(s_693.val()), literalKeywords_620)]);
const isKeywordExprPrefix_652 = R.allPass([isKeyword_639, s_694 => R.any(R.equals(s_694.val()), ["instanceof", "typeof", "delete", "void", "yield", "throw", "new", "case"])]);
let last_653 = p_695 => p_695.last();
let safeLast_654 = R.pipe(R.cond([[isEmpty_637, R.always(Nothing_616())], [R.T, R.compose(_ramdaFantasy.Maybe.of, last_653)]]));
let stuffTrue_655 = R.curry((p_696, b_697) => b_697 ? Just_615(p_696) : Nothing_616());
let stuffFalse_656 = R.curry((p_698, b_699) => !b_699 ? Just_615(p_698) : Nothing_616());
let isTopColon_657 = R.pipe(safeLast_654, R.map(isColon_648), _ramdaFantasy.Maybe.maybe(false, R.identity));
let isTopPunctuator_658 = R.pipe(safeLast_654, R.map(isPunctuator_638), _ramdaFantasy.Maybe.maybe(false, R.identity));
let isExprReturn_659 = R.curry((l_700, p_701) => {
  let retKwd_702 = safeLast_654(p_701);
  let maybeDot_703 = pop_670(p_701).chain(safeLast_654);
  if (maybeDot_703.map(isDot_647).getOrElse(false)) {
    return true;
  }
  return retKwd_702.map(s_704 => {
    return s_704.match("keyword") && s_704.val() === "return" && s_704.lineNumber() === l_700;
  }).getOrElse(false);
});
const isTopOperator_660 = R.pipe(safeLast_654, R.map(isOperator_650), _ramdaFantasy.Maybe.maybe(false, R.identity));
const isTopKeywordExprPrefix_661 = R.pipe(safeLast_654, R.map(isKeywordExprPrefix_652), _ramdaFantasy.Maybe.maybe(false, R.identity));
let isExprPrefix_662 = R.curry((l_705, b_706) => R.cond([[isEmpty_637, R.always(b_706)], [isTopColon_657, R.always(b_706)], [isTopKeywordExprPrefix_661, R.T], [isTopOperator_660, R.T], [isTopPunctuator_658, R.always(b_706)], [isExprReturn_659(l_705), R.T], [R.T, R.F]]));
let curly_663 = p_707 => safeLast_654(p_707).map(isBraces_642).chain(stuffTrue_655(p_707));
let paren_664 = p_708 => safeLast_654(p_708).map(isParens_641).chain(stuffTrue_655(p_708));
let func_665 = p_709 => safeLast_654(p_709).map(isFunctionKeyword_649).chain(stuffTrue_655(p_709));
let ident_666 = p_710 => safeLast_654(p_710).map(isIdentifier_644).chain(stuffTrue_655(p_710));
let nonLiteralKeyword_667 = p_711 => safeLast_654(p_711).map(isNonLiteralKeyword_651).chain(stuffTrue_655(p_711));
let opt_668 = R.curry((a_712, b_713, p_714) => {
  let result_715 = R.pipeK(a_712, b_713)(_ramdaFantasy.Maybe.of(p_714));
  return _ramdaFantasy.Maybe.isJust(result_715) ? result_715 : _ramdaFantasy.Maybe.of(p_714);
});
let notDot_669 = R.ifElse(R.whereEq({ size: 0 }), Just_615, p_716 => safeLast_654(p_716).map(s_717 => !(s_717.match("punctuator") && s_717.val() === ".")).chain(stuffTrue_655(p_716)));
let pop_670 = R.compose(Just_615, p_718 => p_718.pop());
const functionPrefix_671 = R.pipeK(curly_663, pop_670, paren_664, pop_670, opt_668(ident_666, pop_670), func_665);
const isRegexPrefix_672 = b_719 => R.anyPass([isEmpty_637, isTopPunctuator_658, R.pipe(_ramdaFantasy.Maybe.of, R.pipeK(nonLiteralKeyword_667, pop_670, notDot_669), _ramdaFantasy.Maybe.isJust), R.pipe(_ramdaFantasy.Maybe.of, R.pipeK(paren_664, pop_670, nonLiteralKeyword_667, pop_670, notDot_669), _ramdaFantasy.Maybe.isJust), R.pipe(_ramdaFantasy.Maybe.of, functionPrefix_671, R.chain(p_720 => {
  return safeLast_654(p_720).map(s_721 => s_721.lineNumber()).chain(fnLine_722 => {
    return pop_670(p_720).map(isExprPrefix_662(fnLine_722, b_719));
  }).chain(stuffFalse_656(p_720));
}), _ramdaFantasy.Maybe.isJust), p_723 => {
  let isCurly_724 = _ramdaFantasy.Maybe.isJust(safeLast_654(p_723).map(isBraces_642));
  let alreadyCheckedFunction_725 = R.pipe(_ramdaFantasy.Maybe.of, functionPrefix_671, _ramdaFantasy.Maybe.isJust)(p_723);
  if (alreadyCheckedFunction_725) {
    return false;
  }
  return R.pipe(_ramdaFantasy.Maybe.of, R.chain(curly_663), R.chain(p_726 => {
    return safeLast_654(p_726).map(s_727 => s_727.lineNumber()).chain(curlyLine_728 => {
      return pop_670(p_726).map(isExprPrefix_662(curlyLine_728, b_719));
    }).chain(stuffFalse_656(p_726));
  }), _ramdaFantasy.Maybe.isJust)(p_723);
}]);
function lastEl_673(l_729) {
  return l_729[l_729.length - 1];
}
class Reader extends _tokenizer2.default {
  constructor(strings_730, context_731, replacements_732) {
    super(Array.isArray(strings_730) ? strings_730.join("") : strings_730);
    this.delimStack = new Map();
    this.insideSyntaxTemplate = [false];
    this.context = context_731;
    if (Array.isArray(strings_730)) {
      let totalIndex = 0;
      this.replacementIndex = R.reduce((acc_733, strRep_734) => {
        acc_733.push({ index: totalIndex + strRep_734[0].length, replacement: strRep_734[1] });
        totalIndex += strRep_734[0].length;
        return acc_733;
      }, [], R.zip(strings_730, replacements_732));
    }
  }
  read() {
    let stack_735 = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];
    let b_736 = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
    let singleDelimiter_737 = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

    let prefix_738 = (0, _immutable.List)();
    while (true) {
      let tok = this.advance(prefix_738, b_736);
      if (tok instanceof _syntax2.default || tok instanceof _terms2.default) {
        stack_735.push(tok);
        continue;
      }
      if (Array.isArray(tok)) {
        Array.prototype.push.apply(stack_735, tok);
        continue;
      }
      if (_immutable.List.isList(tok)) {
        Array.prototype.push.apply(stack_735, tok.toArray());
        continue;
      }
      if (isEOS_627(tok)) {
        if (stack_735[0] && isLeftDelimiter_631(stack_735[0].token)) {
          throw this.createUnexpected(tok);
        }
        break;
      }
      if (isLeftDelimiter_631(tok)) {
        if (isLeftSyntax_629(tok)) {
          this.insideSyntaxTemplate.push(true);
        }
        let line = tok.slice.startLocation.line;
        let innerB = isLeftBrace_622(tok) ? isExprPrefix_662(line, b_736)(prefix_738) : true;
        let inner = this.read([new _syntax2.default(tok, this.context)], innerB, false);
        let stx = new _syntax2.default(inner, this.context);
        prefix_738 = prefix_738.concat(stx);
        stack_735.push(stx);
        if (singleDelimiter_737) {
          break;
        }
      } else if (isRightDelimiter_632(tok)) {
        if (stack_735[0] && !isMatchingDelimiters_633(stack_735[0].token, tok)) {
          throw this.createUnexpected(tok);
        }
        let stx = new _syntax2.default(tok, this.context);
        stack_735.push(stx);
        if (lastEl_673(this.insideSyntaxTemplate) && isRightSyntax_630(tok)) {
          this.insideSyntaxTemplate.pop();
        }
        break;
      } else {
        let stx = new _syntax2.default(tok, this.context);
        prefix_738 = prefix_738.concat(stx);
        stack_735.push(stx);
      }
    }
    return (0, _immutable.List)(stack_735);
  }
  advance(prefix_739, b_740) {
    let startLocation_741 = this.getLocation();
    this.lastIndex = this.index;
    this.lastLine = this.line;
    this.lastLineStart = this.lineStart;
    this.skipComment();
    this.startIndex = this.index;
    this.startLine = this.line;
    this.startLineStart = this.lineStart;
    if (this.replacementIndex && this.replacementIndex[0] && this.index >= this.replacementIndex[0].index) {
      let rep = this.replacementIndex[0].replacement;
      this.replacementIndex.shift();
      return rep;
    }
    let charCode_742 = this.source.charCodeAt(this.index);
    if (charCode_742 === 96) {
      let element,
          items = [];
      let startLocation_741 = this.getLocation();
      let start = this.index;
      this.index++;
      if (lastEl_673(this.insideSyntaxTemplate)) {
        let slice = this.getSlice(start, startLocation_741);
        return { type: RSYNTAX_618, value: "`", slice: slice };
      }
      do {
        element = this.scanTemplateElement();
        items.push(element);
        if (element.interp) {
          element = this.read([], false, true);
          (0, _errors.assert)(element.size === 1, "should only have read a single delimiter inside a template");
          items.push(element.get(0));
        }
      } while (!element.tail);
      return { type: _tokenizer.TokenType.TEMPLATE, items: (0, _immutable.List)(items) };
    } else if (charCode_742 === 35) {
      let startLocation_741 = this.getLocation();
      let start = this.index;
      let slice = this.getSlice(start, startLocation_741);
      this.index++;
      if (this.source.charCodeAt(this.index) === 96) {
        this.index++;
        return { type: LSYNTAX_617, value: "#`", slice: slice };
      }
      return { type: _tokenizer.TokenType.IDENTIFIER, value: "#", slice: slice };
    } else if (charCode_742 === 64) {
      let startLocation_741 = this.getLocation();
      let start = this.index;
      let slice = this.getSlice(start, startLocation_741);
      this.index++;
      return { type: AT_619, value: "@", slice: slice };
    }
    let lookahead_743 = super.advance();
    if (lookahead_743.type === _tokenizer.TokenType.DIV && isRegexPrefix_672(b_740)(prefix_739)) {
      return super.scanRegExp("/");
    }
    return lookahead_743;
  }
  scanTemplateElement() {
    let startLocation_744 = this.getLocation();
    let start_745 = this.index;
    while (this.index < this.source.length) {
      let ch = this.source.charCodeAt(this.index);
      switch (ch) {
        case 96:
          let slice = this.getSlice(start_745, startLocation_744);
          this.index++;
          return { type: _tokenizer.TokenType.TEMPLATE, tail: true, interp: false, slice: slice };
        case 36:
          if (this.source.charCodeAt(this.index + 1) === 123) {
            let slice = this.getSlice(start_745, startLocation_744);
            this.index += 1;
            return { type: _tokenizer.TokenType.TEMPLATE, tail: false, interp: true, slice: slice };
          }
          this.index++;
          break;
        case 92:
          {
            let octal = this.scanStringEscape("", null)[1];
            if (octal != null) {
              throw this.createILLEGAL();
            }
            break;
          }
        default:
          this.index++;
      }
    }
    throw this.createILLEGAL();
  }
}
exports.default = Reader;
//# sourceMappingURL=data:application/json;base64,