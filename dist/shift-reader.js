"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _tokenizer = require("shift-parser/dist/tokenizer");

var _tokenizer2 = _interopRequireDefault(_tokenizer);

var _immutable = require("immutable");

var _syntax = require("./syntax");

var _syntax2 = _interopRequireDefault(_syntax);

var _ramdaFantasy = require("ramda-fantasy");

var _errors = require("./errors");

var _terms = require("./terms");

var _terms2 = _interopRequireDefault(_terms);

var _ramda = require("ramda");

var R = _interopRequireWildcard(_ramda);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const Just_616 = _ramdaFantasy.Maybe.Just;
const Nothing_617 = _ramdaFantasy.Maybe.Nothing;
const LSYNTAX_618 = { name: "left-syntax" };
const RSYNTAX_619 = { name: "right-syntax" };
const AT_620 = { klass: _tokenizer.TokenClass.Punctuator, name: "@" };
const literalKeywords_621 = ["this", "null", "true", "false"];
const isLeftBracket_622 = R.whereEq({ type: _tokenizer.TokenType.LBRACK });
const isLeftBrace_623 = R.whereEq({ type: _tokenizer.TokenType.LBRACE });
const isLeftParen_624 = R.whereEq({ type: _tokenizer.TokenType.LPAREN });
const isRightBracket_625 = R.whereEq({ type: _tokenizer.TokenType.RBRACK });
const isRightBrace_626 = R.whereEq({ type: _tokenizer.TokenType.RBRACE });
const isRightParen_627 = R.whereEq({ type: _tokenizer.TokenType.RPAREN });
const isEOS_628 = R.whereEq({ type: _tokenizer.TokenType.EOS });
const isHash_629 = R.whereEq({ type: _tokenizer.TokenType.IDENTIFIER, value: "#" });
const isLeftSyntax_630 = R.whereEq({ type: LSYNTAX_618 });
const isRightSyntax_631 = R.whereEq({ type: RSYNTAX_619 });
const isLeftDelimiter_632 = R.anyPass([isLeftBracket_622, isLeftBrace_623, isLeftParen_624, isLeftSyntax_630]);
const isRightDelimiter_633 = R.anyPass([isRightBracket_625, isRightBrace_626, isRightParen_627, isRightSyntax_631]);
const isMatchingDelimiters_634 = R.cond([[isLeftBracket_622, (__675, b_676) => isRightBracket_625(b_676)], [isLeftBrace_623, (__677, b_678) => isRightBrace_626(b_678)], [isLeftParen_624, (__679, b_680) => isRightParen_627(b_680)], [isLeftSyntax_630, (__681, b_682) => isRightSyntax_631(b_682)], [R.T, R.F]]);
const assignOps_635 = ["=", "+=", "-=", "*=", "/=", "%=", "<<=", ">>=", ">>>=", "&=", "|=", "^=", ","];
const binaryOps_636 = ["+", "-", "*", "/", "%", "<<", ">>", ">>>", "&", "|", "^", "&&", "||", "?", ":", "===", "==", ">=", "<=", "<", ">", "!=", "!==", "instanceof"];
const unaryOps_637 = ["++", "--", "~", "!", "delete", "void", "typeof", "yield", "throw", "new"];
const isEmpty_638 = R.whereEq({ size: 0 });
const isPunctuator_639 = s_683 => s_683.match("punctuator");
const isKeyword_640 = s_684 => s_684.match("keyword");
const isDelimiter_641 = s_685 => s_685.match("delimiter");
const isParens_642 = s_686 => s_686.match("parens");
const isBraces_643 = s_687 => s_687.match("braces");
const isBrackets_644 = s_688 => s_688.match("brackets");
const isIdentifier_645 = s_689 => s_689.match("identifier");
const val_646 = s_690 => s_690.val();
const isVal_647 = R.curry((v_691, s_692) => s_692.val() === v_691);
const isDot_648 = R.allPass([isPunctuator_639, isVal_647(".")]);
const isColon_649 = R.allPass([isPunctuator_639, isVal_647(":")]);
const isFunctionKeyword_650 = R.allPass([isKeyword_640, isVal_647("function")]);
const isOperator_651 = s_693 => (s_693.match("punctuator") || s_693.match("keyword")) && R.any(R.equals(s_693.val()), assignOps_635.concat(binaryOps_636).concat(unaryOps_637));
const isNonLiteralKeyword_652 = R.allPass([isKeyword_640, s_694 => R.none(R.equals(s_694.val()), literalKeywords_621)]);
const isKeywordExprPrefix_653 = R.allPass([isKeyword_640, s_695 => R.any(R.equals(s_695.val()), ["instanceof", "typeof", "delete", "void", "yield", "throw", "new", "case"])]);
let last_654 = p_696 => p_696.last();
let safeLast_655 = R.pipe(R.cond([[isEmpty_638, R.always(Nothing_617())], [R.T, R.compose(_ramdaFantasy.Maybe.of, last_654)]]));
let stuffTrue_656 = R.curry((p_697, b_698) => b_698 ? Just_616(p_697) : Nothing_617());
let stuffFalse_657 = R.curry((p_699, b_700) => !b_700 ? Just_616(p_699) : Nothing_617());
let isTopColon_658 = R.pipe(safeLast_655, R.map(isColon_649), _ramdaFantasy.Maybe.maybe(false, R.identity));
let isTopPunctuator_659 = R.pipe(safeLast_655, R.map(isPunctuator_639), _ramdaFantasy.Maybe.maybe(false, R.identity));
let isExprReturn_660 = R.curry((l_701, p_702) => {
  let retKwd_703 = safeLast_655(p_702);
  let maybeDot_704 = pop_671(p_702).chain(safeLast_655);
  if (maybeDot_704.map(isDot_648).getOrElse(false)) {
    return true;
  }
  return retKwd_703.map(s_705 => {
    return s_705.match("keyword") && s_705.val() === "return" && s_705.lineNumber() === l_701;
  }).getOrElse(false);
});
const isTopOperator_661 = R.pipe(safeLast_655, R.map(isOperator_651), _ramdaFantasy.Maybe.maybe(false, R.identity));
const isTopKeywordExprPrefix_662 = R.pipe(safeLast_655, R.map(isKeywordExprPrefix_653), _ramdaFantasy.Maybe.maybe(false, R.identity));
let isExprPrefix_663 = R.curry((l_706, b_707) => R.cond([[isEmpty_638, R.always(b_707)], [isTopColon_658, R.always(b_707)], [isTopKeywordExprPrefix_662, R.T], [isTopOperator_661, R.T], [isTopPunctuator_659, R.always(b_707)], [isExprReturn_660(l_706), R.T], [R.T, R.F]]));
let curly_664 = p_708 => safeLast_655(p_708).map(isBraces_643).chain(stuffTrue_656(p_708));
let paren_665 = p_709 => safeLast_655(p_709).map(isParens_642).chain(stuffTrue_656(p_709));
let func_666 = p_710 => safeLast_655(p_710).map(isFunctionKeyword_650).chain(stuffTrue_656(p_710));
let ident_667 = p_711 => safeLast_655(p_711).map(isIdentifier_645).chain(stuffTrue_656(p_711));
let nonLiteralKeyword_668 = p_712 => safeLast_655(p_712).map(isNonLiteralKeyword_652).chain(stuffTrue_656(p_712));
let opt_669 = R.curry((a_713, b_714, p_715) => {
  let result_716 = R.pipeK(a_713, b_714)(_ramdaFantasy.Maybe.of(p_715));
  return _ramdaFantasy.Maybe.isJust(result_716) ? result_716 : _ramdaFantasy.Maybe.of(p_715);
});
let notDot_670 = R.ifElse(R.whereEq({ size: 0 }), Just_616, p_717 => safeLast_655(p_717).map(s_718 => !(s_718.match("punctuator") && s_718.val() === ".")).chain(stuffTrue_656(p_717)));
let pop_671 = R.compose(Just_616, p_719 => p_719.pop());
const functionPrefix_672 = R.pipeK(curly_664, pop_671, paren_665, pop_671, opt_669(ident_667, pop_671), func_666);
const isRegexPrefix_673 = b_720 => R.anyPass([isEmpty_638, isTopPunctuator_659, R.pipe(_ramdaFantasy.Maybe.of, R.pipeK(nonLiteralKeyword_668, pop_671, notDot_670), _ramdaFantasy.Maybe.isJust), R.pipe(_ramdaFantasy.Maybe.of, R.pipeK(paren_665, pop_671, nonLiteralKeyword_668, pop_671, notDot_670), _ramdaFantasy.Maybe.isJust), R.pipe(_ramdaFantasy.Maybe.of, functionPrefix_672, R.chain(p_721 => {
  return safeLast_655(p_721).map(s_722 => s_722.lineNumber()).chain(fnLine_723 => {
    return pop_671(p_721).map(isExprPrefix_663(fnLine_723, b_720));
  }).chain(stuffFalse_657(p_721));
}), _ramdaFantasy.Maybe.isJust), p_724 => {
  let isCurly_725 = _ramdaFantasy.Maybe.isJust(safeLast_655(p_724).map(isBraces_643));
  let alreadyCheckedFunction_726 = R.pipe(_ramdaFantasy.Maybe.of, functionPrefix_672, _ramdaFantasy.Maybe.isJust)(p_724);
  if (alreadyCheckedFunction_726) {
    return false;
  }
  return R.pipe(_ramdaFantasy.Maybe.of, R.chain(curly_664), R.chain(p_727 => {
    return safeLast_655(p_727).map(s_728 => s_728.lineNumber()).chain(curlyLine_729 => {
      return pop_671(p_727).map(isExprPrefix_663(curlyLine_729, b_720));
    }).chain(stuffFalse_657(p_727));
  }), _ramdaFantasy.Maybe.isJust)(p_724);
}]);
function lastEl_674(l_730) {
  return l_730[l_730.length - 1];
}
class Reader extends _tokenizer2.default {
  constructor(strings_731, context_732, replacements_733) {
    super(Array.isArray(strings_731) ? strings_731.join("") : strings_731);
    this.delimStack = new Map();
    this.insideSyntaxTemplate = [false];
    this.context = context_732;
    if (Array.isArray(strings_731)) {
      let totalIndex = 0;
      this.replacementIndex = R.reduce((acc_734, strRep_735) => {
        acc_734.push({ index: totalIndex + strRep_735[0].length, replacement: strRep_735[1] });
        totalIndex += strRep_735[0].length;
        return acc_734;
      }, [], R.zip(strings_731, replacements_733));
    }
  }
  read() {
    let stack_736 = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];
    let b_737 = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
    let singleDelimiter_738 = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

    let prefix_739 = (0, _immutable.List)();
    while (true) {
      let tok = this.advance(prefix_739, b_737);
      if (tok instanceof _syntax2.default || tok instanceof _terms2.default) {
        stack_736.push(tok);
        continue;
      }
      if (Array.isArray(tok)) {
        Array.prototype.push.apply(stack_736, tok);
        continue;
      }
      if (_immutable.List.isList(tok)) {
        Array.prototype.push.apply(stack_736, tok.toArray());
        continue;
      }
      if (isEOS_628(tok)) {
        if (stack_736[0] && isLeftDelimiter_632(stack_736[0].token)) {
          throw this.createUnexpected(tok);
        }
        break;
      }
      if (isLeftDelimiter_632(tok)) {
        if (isLeftSyntax_630(tok)) {
          this.insideSyntaxTemplate.push(true);
        }
        let line = tok.slice.startLocation.line;
        let innerB = isLeftBrace_623(tok) ? isExprPrefix_663(line, b_737)(prefix_739) : true;
        let inner = this.read([new _syntax2.default(tok, this.context)], innerB, false);
        let stx = new _syntax2.default(inner, this.context);
        prefix_739 = prefix_739.concat(stx);
        stack_736.push(stx);
        if (singleDelimiter_738) {
          break;
        }
      } else if (isRightDelimiter_633(tok)) {
        if (stack_736[0] && !isMatchingDelimiters_634(stack_736[0].token, tok)) {
          throw this.createUnexpected(tok);
        }
        let stx = new _syntax2.default(tok, this.context);
        stack_736.push(stx);
        if (lastEl_674(this.insideSyntaxTemplate) && isRightSyntax_631(tok)) {
          this.insideSyntaxTemplate.pop();
        }
        break;
      } else {
        let stx = new _syntax2.default(tok, this.context);
        prefix_739 = prefix_739.concat(stx);
        stack_736.push(stx);
      }
    }
    return (0, _immutable.List)(stack_736);
  }
  advance(prefix_740, b_741) {
    let startLocation_742 = this.getLocation();
    this.lastIndex = this.index;
    this.lastLine = this.line;
    this.lastLineStart = this.lineStart;
    this.skipComment();
    this.startIndex = this.index;
    this.startLine = this.line;
    this.startLineStart = this.lineStart;
    if (this.replacementIndex && this.replacementIndex[0] && this.index >= this.replacementIndex[0].index) {
      let rep = this.replacementIndex[0].replacement;
      this.replacementIndex.shift();
      return rep;
    }
    let charCode_743 = this.source.charCodeAt(this.index);
    if (charCode_743 === 96) {
      let element,
          items = [];
      let startLocation_742 = this.getLocation();
      let start = this.index;
      this.index++;
      if (lastEl_674(this.insideSyntaxTemplate)) {
        let slice = this.getSlice(start, startLocation_742);
        return { type: RSYNTAX_619, value: "`", slice: slice };
      }
      do {
        element = this.scanTemplateElement();
        items.push(element);
        if (element.interp) {
          element = this.read([], false, true);
          (0, _errors.assert)(element.size === 1, "should only have read a single delimiter inside a template");
          items.push(element.get(0));
        }
      } while (!element.tail);
      return { type: _tokenizer.TokenType.TEMPLATE, items: (0, _immutable.List)(items) };
    } else if (charCode_743 === 35) {
      let startLocation_742 = this.getLocation();
      let start = this.index;
      let slice = this.getSlice(start, startLocation_742);
      this.index++;
      if (this.source.charCodeAt(this.index) === 96) {
        this.index++;
        return { type: LSYNTAX_618, value: "#`", slice: slice };
      }
      return { type: _tokenizer.TokenType.IDENTIFIER, value: "#", slice: slice };
    } else if (charCode_743 === 64) {
      let startLocation_742 = this.getLocation();
      let start = this.index;
      let slice = this.getSlice(start, startLocation_742);
      this.index++;
      return { type: AT_620, value: "@", slice: slice };
    }
    let lookahead_744 = super.advance();
    if (lookahead_744.type === _tokenizer.TokenType.DIV && isRegexPrefix_673(b_741)(prefix_740)) {
      return super.scanRegExp("/");
    }
    return lookahead_744;
  }
  scanTemplateElement() {
    let startLocation_745 = this.getLocation();
    let start_746 = this.index;
    while (this.index < this.source.length) {
      let ch = this.source.charCodeAt(this.index);
      switch (ch) {
        case 96:
          let slice = this.getSlice(start_746, startLocation_745);
          this.index++;
          return { type: _tokenizer.TokenType.TEMPLATE, tail: true, interp: false, slice: slice };
        case 36:
          if (this.source.charCodeAt(this.index + 1) === 123) {
            let slice = this.getSlice(start_746, startLocation_745);
            this.index += 1;
            return { type: _tokenizer.TokenType.TEMPLATE, tail: false, interp: true, slice: slice };
          }
          this.index++;
          break;
        case 92:
          {
            let octal = this.scanStringEscape("", null)[1];
            if (octal != null) {
              throw this.createILLEGAL();
            }
            break;
          }
        default:
          this.index++;
      }
    }
    throw this.createILLEGAL();
  }
}
exports.default = Reader;
//# sourceMappingURL=data:application/json;base64,