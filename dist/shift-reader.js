"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _tokenizer = require("shift-parser/dist/tokenizer");

var _tokenizer2 = _interopRequireDefault(_tokenizer);

var _immutable = require("immutable");

var _syntax = require("./syntax");

var _syntax2 = _interopRequireDefault(_syntax);

var _ramdaFantasy = require("ramda-fantasy");

var _errors = require("./errors");

var _terms = require("./terms");

var _terms2 = _interopRequireDefault(_terms);

var _ramda = require("ramda");

var R = _interopRequireWildcard(_ramda);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const Just_656 = _ramdaFantasy.Maybe.Just;
const Nothing_657 = _ramdaFantasy.Maybe.Nothing;
const LSYNTAX_658 = { name: "left-syntax" };
const RSYNTAX_659 = { name: "right-syntax" };
const AT_660 = { klass: _tokenizer.TokenClass.Punctuator, name: "@" };
const literalKeywords_661 = ["this", "null", "true", "false"];
const isLeftBracket_662 = R.whereEq({ type: _tokenizer.TokenType.LBRACK });
const isLeftBrace_663 = R.whereEq({ type: _tokenizer.TokenType.LBRACE });
const isLeftParen_664 = R.whereEq({ type: _tokenizer.TokenType.LPAREN });
const isRightBracket_665 = R.whereEq({ type: _tokenizer.TokenType.RBRACK });
const isRightBrace_666 = R.whereEq({ type: _tokenizer.TokenType.RBRACE });
const isRightParen_667 = R.whereEq({ type: _tokenizer.TokenType.RPAREN });
const isEOS_668 = R.whereEq({ type: _tokenizer.TokenType.EOS });
const isHash_669 = R.whereEq({ type: _tokenizer.TokenType.IDENTIFIER, value: "#" });
const isLeftSyntax_670 = R.whereEq({ type: LSYNTAX_658 });
const isRightSyntax_671 = R.whereEq({ type: RSYNTAX_659 });
const isLeftDelimiter_672 = R.anyPass([isLeftBracket_662, isLeftBrace_663, isLeftParen_664, isLeftSyntax_670]);
const isRightDelimiter_673 = R.anyPass([isRightBracket_665, isRightBrace_666, isRightParen_667, isRightSyntax_671]);
const isMatchingDelimiters_674 = R.cond([[isLeftBracket_662, (__715, b_716) => isRightBracket_665(b_716)], [isLeftBrace_663, (__717, b_718) => isRightBrace_666(b_718)], [isLeftParen_664, (__719, b_720) => isRightParen_667(b_720)], [isLeftSyntax_670, (__721, b_722) => isRightSyntax_671(b_722)], [R.T, R.F]]);
const assignOps_675 = ["=", "+=", "-=", "*=", "/=", "%=", "<<=", ">>=", ">>>=", "&=", "|=", "^=", ","];
const binaryOps_676 = ["+", "-", "*", "/", "%", "<<", ">>", ">>>", "&", "|", "^", "&&", "||", "?", ":", "===", "==", ">=", "<=", "<", ">", "!=", "!==", "instanceof"];
const unaryOps_677 = ["++", "--", "~", "!", "delete", "void", "typeof", "yield", "throw", "new"];
const isEmpty_678 = R.whereEq({ size: 0 });
const isPunctuator_679 = s_723 => s_723.match("punctuator");
const isKeyword_680 = s_724 => s_724.match("keyword");
const isDelimiter_681 = s_725 => s_725.match("delimiter");
const isParens_682 = s_726 => s_726.match("parens");
const isBraces_683 = s_727 => s_727.match("braces");
const isBrackets_684 = s_728 => s_728.match("brackets");
const isIdentifier_685 = s_729 => s_729.match("identifier");
const val_686 = s_730 => s_730.val();
const isVal_687 = R.curry((v_731, s_732) => s_732.val() === v_731);
const isDot_688 = R.allPass([isPunctuator_679, isVal_687(".")]);
const isColon_689 = R.allPass([isPunctuator_679, isVal_687(":")]);
const isFunctionKeyword_690 = R.allPass([isKeyword_680, isVal_687("function")]);
const isOperator_691 = s_733 => (s_733.match("punctuator") || s_733.match("keyword")) && R.any(R.equals(s_733.val()), assignOps_675.concat(binaryOps_676).concat(unaryOps_677));
const isNonLiteralKeyword_692 = R.allPass([isKeyword_680, s_734 => R.none(R.equals(s_734.val()), literalKeywords_661)]);
const isKeywordExprPrefix_693 = R.allPass([isKeyword_680, s_735 => R.any(R.equals(s_735.val()), ["instanceof", "typeof", "delete", "void", "yield", "throw", "new", "case"])]);
let last_694 = p_736 => p_736.last();
let safeLast_695 = R.pipe(R.cond([[isEmpty_678, R.always(Nothing_657())], [R.T, R.compose(_ramdaFantasy.Maybe.of, last_694)]]));
let stuffTrue_696 = R.curry((p_737, b_738) => b_738 ? Just_656(p_737) : Nothing_657());
let stuffFalse_697 = R.curry((p_739, b_740) => !b_740 ? Just_656(p_739) : Nothing_657());
let isTopColon_698 = R.pipe(safeLast_695, R.map(isColon_689), _ramdaFantasy.Maybe.maybe(false, R.identity));
let isTopPunctuator_699 = R.pipe(safeLast_695, R.map(isPunctuator_679), _ramdaFantasy.Maybe.maybe(false, R.identity));
let isExprReturn_700 = R.curry((l_741, p_742) => {
  let retKwd_743 = safeLast_695(p_742);
  let maybeDot_744 = pop_711(p_742).chain(safeLast_695);
  if (maybeDot_744.map(isDot_688).getOrElse(false)) {
    return true;
  }
  return retKwd_743.map(s_745 => {
    return s_745.match("keyword") && s_745.val() === "return" && s_745.lineNumber() === l_741;
  }).getOrElse(false);
});
const isTopOperator_701 = R.pipe(safeLast_695, R.map(isOperator_691), _ramdaFantasy.Maybe.maybe(false, R.identity));
const isTopKeywordExprPrefix_702 = R.pipe(safeLast_695, R.map(isKeywordExprPrefix_693), _ramdaFantasy.Maybe.maybe(false, R.identity));
let isExprPrefix_703 = R.curry((l_746, b_747) => R.cond([[isEmpty_678, R.always(b_747)], [isTopColon_698, R.always(b_747)], [isTopKeywordExprPrefix_702, R.T], [isTopOperator_701, R.T], [isTopPunctuator_699, R.always(b_747)], [isExprReturn_700(l_746), R.T], [R.T, R.F]]));
let curly_704 = p_748 => safeLast_695(p_748).map(isBraces_683).chain(stuffTrue_696(p_748));
let paren_705 = p_749 => safeLast_695(p_749).map(isParens_682).chain(stuffTrue_696(p_749));
let func_706 = p_750 => safeLast_695(p_750).map(isFunctionKeyword_690).chain(stuffTrue_696(p_750));
let ident_707 = p_751 => safeLast_695(p_751).map(isIdentifier_685).chain(stuffTrue_696(p_751));
let nonLiteralKeyword_708 = p_752 => safeLast_695(p_752).map(isNonLiteralKeyword_692).chain(stuffTrue_696(p_752));
let opt_709 = R.curry((a_753, b_754, p_755) => {
  let result_756 = R.pipeK(a_753, b_754)(_ramdaFantasy.Maybe.of(p_755));
  return _ramdaFantasy.Maybe.isJust(result_756) ? result_756 : _ramdaFantasy.Maybe.of(p_755);
});
let notDot_710 = R.ifElse(R.whereEq({ size: 0 }), Just_656, p_757 => safeLast_695(p_757).map(s_758 => !(s_758.match("punctuator") && s_758.val() === ".")).chain(stuffTrue_696(p_757)));
let pop_711 = R.compose(Just_656, p_759 => p_759.pop());
const functionPrefix_712 = R.pipeK(curly_704, pop_711, paren_705, pop_711, opt_709(ident_707, pop_711), func_706);
const isRegexPrefix_713 = b_760 => R.anyPass([isEmpty_678, isTopPunctuator_699, R.pipe(_ramdaFantasy.Maybe.of, R.pipeK(nonLiteralKeyword_708, pop_711, notDot_710), _ramdaFantasy.Maybe.isJust), R.pipe(_ramdaFantasy.Maybe.of, R.pipeK(paren_705, pop_711, nonLiteralKeyword_708, pop_711, notDot_710), _ramdaFantasy.Maybe.isJust), R.pipe(_ramdaFantasy.Maybe.of, functionPrefix_712, R.chain(p_761 => {
  return safeLast_695(p_761).map(s_762 => s_762.lineNumber()).chain(fnLine_763 => {
    return pop_711(p_761).map(isExprPrefix_703(fnLine_763, b_760));
  }).chain(stuffFalse_697(p_761));
}), _ramdaFantasy.Maybe.isJust), p_764 => {
  let isCurly_765 = _ramdaFantasy.Maybe.isJust(safeLast_695(p_764).map(isBraces_683));
  let alreadyCheckedFunction_766 = R.pipe(_ramdaFantasy.Maybe.of, functionPrefix_712, _ramdaFantasy.Maybe.isJust)(p_764);
  if (alreadyCheckedFunction_766) {
    return false;
  }
  return R.pipe(_ramdaFantasy.Maybe.of, R.chain(curly_704), R.chain(p_767 => {
    return safeLast_695(p_767).map(s_768 => s_768.lineNumber()).chain(curlyLine_769 => {
      return pop_711(p_767).map(isExprPrefix_703(curlyLine_769, b_760));
    }).chain(stuffFalse_697(p_767));
  }), _ramdaFantasy.Maybe.isJust)(p_764);
}]);
function lastEl_714(l_770) {
  return l_770[l_770.length - 1];
}
class Reader extends _tokenizer2.default {
  constructor(strings_771, context_772, replacements_773) {
    super(Array.isArray(strings_771) ? strings_771.join("") : strings_771);
    this.delimStack = new Map();
    this.insideSyntaxTemplate = [false];
    this.context = context_772;
    if (Array.isArray(strings_771)) {
      let totalIndex = 0;
      this.replacementIndex = R.reduce((acc_774, strRep_775) => {
        acc_774.push({ index: totalIndex + strRep_775[0].length, replacement: strRep_775[1] });
        totalIndex += strRep_775[0].length;
        return acc_774;
      }, [], R.zip(strings_771, replacements_773));
    }
  }
  read() {
    let stack_776 = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];
    let b_777 = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
    let singleDelimiter_778 = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

    let prefix_779 = (0, _immutable.List)();
    while (true) {
      let tok = this.advance(prefix_779, b_777);
      if (tok.scopesets || tok instanceof _terms2.default) {
        stack_776.push(tok);
        continue;
      }
      if (Array.isArray(tok)) {
        Array.prototype.push.apply(stack_776, tok);
        continue;
      }
      if (_immutable.List.isList(tok)) {
        Array.prototype.push.apply(stack_776, tok.toArray());
        continue;
      }
      if (isEOS_668(tok)) {
        if (stack_776[0] && isLeftDelimiter_672(stack_776[0].token)) {
          throw this.createUnexpected(tok);
        }
        break;
      }
      if (isLeftDelimiter_672(tok)) {
        if (isLeftSyntax_670(tok)) {
          this.insideSyntaxTemplate.push(true);
        }
        let line = tok.slice.startLocation.line;
        let innerB = isLeftBrace_663(tok) ? isExprPrefix_703(line, b_777)(prefix_779) : true;
        let inner = this.read([new _syntax2.default(tok, this.context)], innerB, false);
        let stx = new _syntax2.default(inner, this.context);
        prefix_779 = prefix_779.concat(stx);
        stack_776.push(stx);
        if (singleDelimiter_778) {
          break;
        }
      } else if (isRightDelimiter_673(tok)) {
        if (stack_776[0] && !isMatchingDelimiters_674(stack_776[0].token, tok)) {
          throw this.createUnexpected(tok);
        }
        let stx = new _syntax2.default(tok, this.context);
        stack_776.push(stx);
        if (lastEl_714(this.insideSyntaxTemplate) && isRightSyntax_671(tok)) {
          this.insideSyntaxTemplate.pop();
        }
        break;
      } else {
        let stx = new _syntax2.default(tok, this.context);
        prefix_779 = prefix_779.concat(stx);
        stack_776.push(stx);
      }
    }
    return (0, _immutable.List)(stack_776);
  }
  advance(prefix_780, b_781) {
    let startLocation_782 = this.getLocation();
    this.lastIndex = this.index;
    this.lastLine = this.line;
    this.lastLineStart = this.lineStart;
    this.skipComment();
    this.startIndex = this.index;
    this.startLine = this.line;
    this.startLineStart = this.lineStart;
    if (this.replacementIndex && this.replacementIndex[0] && this.index >= this.replacementIndex[0].index) {
      let rep = this.replacementIndex[0].replacement;
      this.replacementIndex.shift();
      return rep;
    }
    let charCode_783 = this.source.charCodeAt(this.index);
    if (charCode_783 === 96) {
      let element,
          items = [];
      let startLocation_782 = this.getLocation();
      let start = this.index;
      this.index++;
      if (lastEl_714(this.insideSyntaxTemplate)) {
        let slice = this.getSlice(start, startLocation_782);
        return { type: RSYNTAX_659, value: "`", slice: slice };
      }
      do {
        element = this.scanTemplateElement();
        items.push(element);
        if (element.interp) {
          element = this.read([], false, true);
          (0, _errors.assert)(element.size === 1, "should only have read a single delimiter inside a template");
          items.push(element.get(0));
        }
      } while (!element.tail);
      return { type: _tokenizer.TokenType.TEMPLATE, items: (0, _immutable.List)(items) };
    } else if (charCode_783 === 35) {
      let startLocation_782 = this.getLocation();
      let start = this.index;
      let slice = this.getSlice(start, startLocation_782);
      this.index++;
      if (this.source.charCodeAt(this.index) === 96) {
        this.index++;
        return { type: LSYNTAX_658, value: "#`", slice: slice };
      }
      return { type: _tokenizer.TokenType.IDENTIFIER, value: "#", slice: slice };
    } else if (charCode_783 === 64) {
      let startLocation_782 = this.getLocation();
      let start = this.index;
      let slice = this.getSlice(start, startLocation_782);
      this.index++;
      return { type: AT_660, value: "@", slice: slice };
    }
    let lookahead_784 = super.advance();
    if (lookahead_784.type === _tokenizer.TokenType.DIV && isRegexPrefix_713(b_781)(prefix_780)) {
      return super.scanRegExp("/");
    }
    return lookahead_784;
  }
  scanTemplateElement() {
    let startLocation_785 = this.getLocation();
    let start_786 = this.index;
    while (this.index < this.source.length) {
      let ch = this.source.charCodeAt(this.index);
      switch (ch) {
        case 96:
          let slice = this.getSlice(start_786, startLocation_785);
          this.index++;
          return { type: _tokenizer.TokenType.TEMPLATE, tail: true, interp: false, slice: slice };
        case 36:
          if (this.source.charCodeAt(this.index + 1) === 123) {
            let slice = this.getSlice(start_786, startLocation_785);
            this.index += 1;
            return { type: _tokenizer.TokenType.TEMPLATE, tail: false, interp: true, slice: slice };
          }
          this.index++;
          break;
        case 92:
          {
            let octal = this.scanStringEscape("", null)[1];
            if (octal != null) {
              throw this.createILLEGAL();
            }
            break;
          }
        default:
          this.index++;
      }
    }
    throw this.createILLEGAL();
  }
}
exports.default = Reader;
//# sourceMappingURL=data:application/json;base64,