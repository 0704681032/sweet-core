"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.replaceTemplate = exports.processTemplate = undefined;

var _immutable = require("immutable");

var _ramdaFantasy = require("ramda-fantasy");

var _ramda = require("ramda");

var _ramda2 = _interopRequireDefault(_ramda);

var _syntax = require("./syntax");

var _syntax2 = _interopRequireDefault(_syntax);

var _errors = require("./errors");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const isDolar_903 = s_914 => s_914 && s_914 instanceof _syntax2.default && s_914.match("identifier") && s_914.val() === "$";
const isDelimiter_904 = s_915 => s_915 && typeof s_915.match === "function" && s_915.match("delimiter");
const isBraces_905 = s_916 => s_916 && typeof s_916.match === "function" && s_916.match("braces");
const isParens_906 = s_917 => s_917 && typeof s_917.match === "function" && s_917.match("parens");
const isBrackets_907 = s_918 => s_918 && typeof s_918.match === "function" && s_918.match("brackets");
const insertIntoDelimiter_908 = _ramda2.default.cond([[isBraces_905, (s_919, r_920) => _syntax2.default.from("braces", r_920, s_919)], [isParens_906, (s_921, r_922) => _syntax2.default.from("parens", r_922, s_921)], [isBrackets_907, (s_923, r_924) => _syntax2.default.from("brackets", r_924, s_923)]]);
const process_909 = (acc_925, s_926) => {
  if (isBraces_905(s_926) && isDolar_903(acc_925.template.last())) {
    return { template: acc_925.template.push(_syntax2.default.from("braces", _immutable.List.of(_syntax2.default.from("number", acc_925.interp.size)), s_926)), interp: acc_925.interp.push(s_926.inner()) };
  } else if (isDelimiter_904(s_926)) {
    let innerResult = processTemplate_912(s_926.inner(), acc_925.interp);
    return { template: acc_925.template.push(insertIntoDelimiter_908(s_926, innerResult.template)), interp: innerResult.interp };
  } else {
    return { template: acc_925.template.push(s_926), interp: acc_925.interp };
  }
};
function cloneLineNumber_910(to_927, from_928) {
  if (from_928 && to_927 && typeof to_927.setLineNumber === "function") {
    return to_927.setLineNumber(from_928.lineNumber());
  }
  return to_927;
}
const replace_911 = (acc_929, s_930) => {
  let last_931 = acc_929.template.get(-1);
  let beforeLast_932 = acc_929.template.get(-2);
  if (isBraces_905(s_930) && isDolar_903(last_931)) {
    let index = s_930.inner().first().val();
    (0, _errors.assert)(acc_929.rep.size > index, "unknown replacement value");
    let replacement = cloneLineNumber_910(acc_929.rep.get(index), beforeLast_932);
    return { template: acc_929.template.pop().concat(replacement), rep: acc_929.rep };
  } else if (isDelimiter_904(s_930)) {
    let innerResult = replaceTemplate_913(s_930.inner(), acc_929.rep);
    return { template: acc_929.template.push(insertIntoDelimiter_908(s_930, innerResult)), rep: acc_929.rep };
  } else {
    return { template: acc_929.template.push(s_930), rep: acc_929.rep };
  }
};
function processTemplate_912(temp_933) {
  let interp_934 = arguments.length <= 1 || arguments[1] === undefined ? (0, _immutable.List)() : arguments[1];

  return temp_933.reduce(process_909, { template: (0, _immutable.List)(), interp: interp_934 });
}
function replaceTemplate_913(temp_935, rep_936) {
  return temp_935.reduce(replace_911, { template: (0, _immutable.List)(), rep: rep_936 }).template;
}
exports.processTemplate = processTemplate_912;
exports.replaceTemplate = replaceTemplate_913;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3N3ZWV0L3RlbXBsYXRlLXByb2Nlc3Nvci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0EsTUFBTSxjQUFjLFNBQVMsU0FBUyxpQ0FBVCxJQUFvQyxNQUFNLEtBQU4sQ0FBWSxZQUFaLENBQXBDLElBQWlFLE1BQU0sR0FBTixPQUFnQixHQUE5RztBQUNBLE1BQU0sa0JBQWtCLFNBQVMsU0FBUyxPQUFPLE1BQU0sS0FBYixLQUF1QixVQUFoQyxJQUE4QyxNQUFNLEtBQU4sQ0FBWSxXQUFaLENBQS9FO0FBQ0EsTUFBTSxlQUFlLFNBQVMsU0FBUyxPQUFPLE1BQU0sS0FBYixLQUF1QixVQUFoQyxJQUE4QyxNQUFNLEtBQU4sQ0FBWSxRQUFaLENBQTVFO0FBQ0EsTUFBTSxlQUFlLFNBQVMsU0FBUyxPQUFPLE1BQU0sS0FBYixLQUF1QixVQUFoQyxJQUE4QyxNQUFNLEtBQU4sQ0FBWSxRQUFaLENBQTVFO0FBQ0EsTUFBTSxpQkFBaUIsU0FBUyxTQUFTLE9BQU8sTUFBTSxLQUFiLEtBQXVCLFVBQWhDLElBQThDLE1BQU0sS0FBTixDQUFZLFVBQVosQ0FBOUU7QUFDQSxNQUFNLDBCQUEwQixnQkFBRSxJQUFGLENBQU8sQ0FBQyxDQUFDLFlBQUQsRUFBZSxDQUFDLEtBQUQsRUFBUSxLQUFSLEtBQWtCLGlCQUFPLElBQVAsQ0FBWSxRQUFaLEVBQXNCLEtBQXRCLEVBQTZCLEtBQTdCLENBQWpDLENBQUQsRUFBd0UsQ0FBQyxZQUFELEVBQWUsQ0FBQyxLQUFELEVBQVEsS0FBUixLQUFrQixpQkFBTyxJQUFQLENBQVksUUFBWixFQUFzQixLQUF0QixFQUE2QixLQUE3QixDQUFqQyxDQUF4RSxFQUErSSxDQUFDLGNBQUQsRUFBaUIsQ0FBQyxLQUFELEVBQVEsS0FBUixLQUFrQixpQkFBTyxJQUFQLENBQVksVUFBWixFQUF3QixLQUF4QixFQUErQixLQUEvQixDQUFuQyxDQUEvSSxDQUFQLENBQWhDO0FBQ0EsTUFBTSxjQUFjLENBQUMsT0FBRCxFQUFVLEtBQVYsS0FBb0I7QUFDdEMsTUFBSSxhQUFhLEtBQWIsS0FBdUIsWUFBWSxRQUFRLFFBQVIsQ0FBaUIsSUFBakIsRUFBWixDQUEzQixFQUFpRTtBQUMvRCxXQUFPLEVBQUMsVUFBVSxRQUFRLFFBQVIsQ0FBaUIsSUFBakIsQ0FBc0IsaUJBQU8sSUFBUCxDQUFZLFFBQVosRUFBc0IsZ0JBQUssRUFBTCxDQUFRLGlCQUFPLElBQVAsQ0FBWSxRQUFaLEVBQXNCLFFBQVEsTUFBUixDQUFlLElBQXJDLENBQVIsQ0FBdEIsRUFBMkUsS0FBM0UsQ0FBdEIsQ0FBWCxFQUFxSCxRQUFRLFFBQVEsTUFBUixDQUFlLElBQWYsQ0FBb0IsTUFBTSxLQUFOLEVBQXBCLENBQTdILEVBQVA7QUFDRCxHQUZELE1BRU8sSUFBSSxnQkFBZ0IsS0FBaEIsQ0FBSixFQUE0QjtBQUNqQyxRQUFJLGNBQWMsb0JBQW9CLE1BQU0sS0FBTixFQUFwQixFQUFtQyxRQUFRLE1BQTNDLENBQWxCO0FBQ0EsV0FBTyxFQUFDLFVBQVUsUUFBUSxRQUFSLENBQWlCLElBQWpCLENBQXNCLHdCQUF3QixLQUF4QixFQUErQixZQUFZLFFBQTNDLENBQXRCLENBQVgsRUFBd0YsUUFBUSxZQUFZLE1BQTVHLEVBQVA7QUFDRCxHQUhNLE1BR0E7QUFDTCxXQUFPLEVBQUMsVUFBVSxRQUFRLFFBQVIsQ0FBaUIsSUFBakIsQ0FBc0IsS0FBdEIsQ0FBWCxFQUF5QyxRQUFRLFFBQVEsTUFBekQsRUFBUDtBQUNEO0FBQ0YsQ0FURDtBQVVBLFNBQVMsbUJBQVQsQ0FBNkIsTUFBN0IsRUFBcUMsUUFBckMsRUFBK0M7QUFDN0MsTUFBSSxZQUFZLE1BQVosSUFBc0IsT0FBTyxPQUFPLGFBQWQsS0FBZ0MsVUFBMUQsRUFBc0U7QUFDcEUsV0FBTyxPQUFPLGFBQVAsQ0FBcUIsU0FBUyxVQUFULEVBQXJCLENBQVA7QUFDRDtBQUNELFNBQU8sTUFBUDtBQUNEO0FBQ0QsTUFBTSxjQUFjLENBQUMsT0FBRCxFQUFVLEtBQVYsS0FBb0I7QUFDdEMsTUFBSSxXQUFXLFFBQVEsUUFBUixDQUFpQixHQUFqQixDQUFxQixDQUFDLENBQXRCLENBQWY7QUFDQSxNQUFJLGlCQUFpQixRQUFRLFFBQVIsQ0FBaUIsR0FBakIsQ0FBcUIsQ0FBQyxDQUF0QixDQUFyQjtBQUNBLE1BQUksYUFBYSxLQUFiLEtBQXVCLFlBQVksUUFBWixDQUEzQixFQUFrRDtBQUNoRCxRQUFJLFFBQVEsTUFBTSxLQUFOLEdBQWMsS0FBZCxHQUFzQixHQUF0QixFQUFaO0FBQ0Esd0JBQU8sUUFBUSxHQUFSLENBQVksSUFBWixHQUFtQixLQUExQixFQUFpQywyQkFBakM7QUFDQSxRQUFJLGNBQWMsb0JBQW9CLFFBQVEsR0FBUixDQUFZLEdBQVosQ0FBZ0IsS0FBaEIsQ0FBcEIsRUFBNEMsY0FBNUMsQ0FBbEI7QUFDQSxXQUFPLEVBQUMsVUFBVSxRQUFRLFFBQVIsQ0FBaUIsR0FBakIsR0FBdUIsTUFBdkIsQ0FBOEIsV0FBOUIsQ0FBWCxFQUF1RCxLQUFLLFFBQVEsR0FBcEUsRUFBUDtBQUNELEdBTEQsTUFLTyxJQUFJLGdCQUFnQixLQUFoQixDQUFKLEVBQTRCO0FBQ2pDLFFBQUksY0FBYyxvQkFBb0IsTUFBTSxLQUFOLEVBQXBCLEVBQW1DLFFBQVEsR0FBM0MsQ0FBbEI7QUFDQSxXQUFPLEVBQUMsVUFBVSxRQUFRLFFBQVIsQ0FBaUIsSUFBakIsQ0FBc0Isd0JBQXdCLEtBQXhCLEVBQStCLFdBQS9CLENBQXRCLENBQVgsRUFBK0UsS0FBSyxRQUFRLEdBQTVGLEVBQVA7QUFDRCxHQUhNLE1BR0E7QUFDTCxXQUFPLEVBQUMsVUFBVSxRQUFRLFFBQVIsQ0FBaUIsSUFBakIsQ0FBc0IsS0FBdEIsQ0FBWCxFQUF5QyxLQUFLLFFBQVEsR0FBdEQsRUFBUDtBQUNEO0FBQ0YsQ0FkRDtBQWVBLFNBQVMsbUJBQVQsQ0FBNkIsUUFBN0IsRUFBNEQ7QUFBQSxNQUFyQixVQUFxQix5REFBUixzQkFBUTs7QUFDMUQsU0FBTyxTQUFTLE1BQVQsQ0FBZ0IsV0FBaEIsRUFBNkIsRUFBQyxVQUFVLHNCQUFYLEVBQW1CLFFBQVEsVUFBM0IsRUFBN0IsQ0FBUDtBQUNEO0FBQ0QsU0FBUyxtQkFBVCxDQUE2QixRQUE3QixFQUF1QyxPQUF2QyxFQUFnRDtBQUM5QyxTQUFPLFNBQVMsTUFBVCxDQUFnQixXQUFoQixFQUE2QixFQUFDLFVBQVUsc0JBQVgsRUFBbUIsS0FBSyxPQUF4QixFQUE3QixFQUErRCxRQUF0RTtBQUNEO1FBQzhCLGUsR0FBdkIsbUI7UUFDdUIsZSxHQUF2QixtQiIsImZpbGUiOiJ0ZW1wbGF0ZS1wcm9jZXNzb3IuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0xpc3R9IGZyb20gXCJpbW11dGFibGVcIjtcbmltcG9ydCB7TWF5YmV9IGZyb20gXCJyYW1kYS1mYW50YXN5XCI7XG5pbXBvcnQgXyBmcm9tIFwicmFtZGFcIjtcbmltcG9ydCBTeW50YXggZnJvbSBcIi4vc3ludGF4XCI7XG5pbXBvcnQge2Fzc2VydH0gZnJvbSBcIi4vZXJyb3JzXCI7XG5jb25zdCBpc0RvbGFyXzkwMyA9IHNfOTE0ID0+IHNfOTE0ICYmIHNfOTE0IGluc3RhbmNlb2YgU3ludGF4ICYmIHNfOTE0Lm1hdGNoKFwiaWRlbnRpZmllclwiKSAmJiBzXzkxNC52YWwoKSA9PT0gXCIkXCI7XG5jb25zdCBpc0RlbGltaXRlcl85MDQgPSBzXzkxNSA9PiBzXzkxNSAmJiB0eXBlb2Ygc185MTUubWF0Y2ggPT09IFwiZnVuY3Rpb25cIiAmJiBzXzkxNS5tYXRjaChcImRlbGltaXRlclwiKTtcbmNvbnN0IGlzQnJhY2VzXzkwNSA9IHNfOTE2ID0+IHNfOTE2ICYmIHR5cGVvZiBzXzkxNi5tYXRjaCA9PT0gXCJmdW5jdGlvblwiICYmIHNfOTE2Lm1hdGNoKFwiYnJhY2VzXCIpO1xuY29uc3QgaXNQYXJlbnNfOTA2ID0gc185MTcgPT4gc185MTcgJiYgdHlwZW9mIHNfOTE3Lm1hdGNoID09PSBcImZ1bmN0aW9uXCIgJiYgc185MTcubWF0Y2goXCJwYXJlbnNcIik7XG5jb25zdCBpc0JyYWNrZXRzXzkwNyA9IHNfOTE4ID0+IHNfOTE4ICYmIHR5cGVvZiBzXzkxOC5tYXRjaCA9PT0gXCJmdW5jdGlvblwiICYmIHNfOTE4Lm1hdGNoKFwiYnJhY2tldHNcIik7XG5jb25zdCBpbnNlcnRJbnRvRGVsaW1pdGVyXzkwOCA9IF8uY29uZChbW2lzQnJhY2VzXzkwNSwgKHNfOTE5LCByXzkyMCkgPT4gU3ludGF4LmZyb20oXCJicmFjZXNcIiwgcl85MjAsIHNfOTE5KV0sIFtpc1BhcmVuc185MDYsIChzXzkyMSwgcl85MjIpID0+IFN5bnRheC5mcm9tKFwicGFyZW5zXCIsIHJfOTIyLCBzXzkyMSldLCBbaXNCcmFja2V0c185MDcsIChzXzkyMywgcl85MjQpID0+IFN5bnRheC5mcm9tKFwiYnJhY2tldHNcIiwgcl85MjQsIHNfOTIzKV1dKTtcbmNvbnN0IHByb2Nlc3NfOTA5ID0gKGFjY185MjUsIHNfOTI2KSA9PiB7XG4gIGlmIChpc0JyYWNlc185MDUoc185MjYpICYmIGlzRG9sYXJfOTAzKGFjY185MjUudGVtcGxhdGUubGFzdCgpKSkge1xuICAgIHJldHVybiB7dGVtcGxhdGU6IGFjY185MjUudGVtcGxhdGUucHVzaChTeW50YXguZnJvbShcImJyYWNlc1wiLCBMaXN0Lm9mKFN5bnRheC5mcm9tKFwibnVtYmVyXCIsIGFjY185MjUuaW50ZXJwLnNpemUpKSwgc185MjYpKSwgaW50ZXJwOiBhY2NfOTI1LmludGVycC5wdXNoKHNfOTI2LmlubmVyKCkpfTtcbiAgfSBlbHNlIGlmIChpc0RlbGltaXRlcl85MDQoc185MjYpKSB7XG4gICAgbGV0IGlubmVyUmVzdWx0ID0gcHJvY2Vzc1RlbXBsYXRlXzkxMihzXzkyNi5pbm5lcigpLCBhY2NfOTI1LmludGVycCk7XG4gICAgcmV0dXJuIHt0ZW1wbGF0ZTogYWNjXzkyNS50ZW1wbGF0ZS5wdXNoKGluc2VydEludG9EZWxpbWl0ZXJfOTA4KHNfOTI2LCBpbm5lclJlc3VsdC50ZW1wbGF0ZSkpLCBpbnRlcnA6IGlubmVyUmVzdWx0LmludGVycH07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHt0ZW1wbGF0ZTogYWNjXzkyNS50ZW1wbGF0ZS5wdXNoKHNfOTI2KSwgaW50ZXJwOiBhY2NfOTI1LmludGVycH07XG4gIH1cbn07XG5mdW5jdGlvbiBjbG9uZUxpbmVOdW1iZXJfOTEwKHRvXzkyNywgZnJvbV85MjgpIHtcbiAgaWYgKGZyb21fOTI4ICYmIHRvXzkyNyAmJiB0eXBlb2YgdG9fOTI3LnNldExpbmVOdW1iZXIgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHJldHVybiB0b185Mjcuc2V0TGluZU51bWJlcihmcm9tXzkyOC5saW5lTnVtYmVyKCkpO1xuICB9XG4gIHJldHVybiB0b185Mjc7XG59XG5jb25zdCByZXBsYWNlXzkxMSA9IChhY2NfOTI5LCBzXzkzMCkgPT4ge1xuICBsZXQgbGFzdF85MzEgPSBhY2NfOTI5LnRlbXBsYXRlLmdldCgtMSk7XG4gIGxldCBiZWZvcmVMYXN0XzkzMiA9IGFjY185MjkudGVtcGxhdGUuZ2V0KC0yKTtcbiAgaWYgKGlzQnJhY2VzXzkwNShzXzkzMCkgJiYgaXNEb2xhcl85MDMobGFzdF85MzEpKSB7XG4gICAgbGV0IGluZGV4ID0gc185MzAuaW5uZXIoKS5maXJzdCgpLnZhbCgpO1xuICAgIGFzc2VydChhY2NfOTI5LnJlcC5zaXplID4gaW5kZXgsIFwidW5rbm93biByZXBsYWNlbWVudCB2YWx1ZVwiKTtcbiAgICBsZXQgcmVwbGFjZW1lbnQgPSBjbG9uZUxpbmVOdW1iZXJfOTEwKGFjY185MjkucmVwLmdldChpbmRleCksIGJlZm9yZUxhc3RfOTMyKTtcbiAgICByZXR1cm4ge3RlbXBsYXRlOiBhY2NfOTI5LnRlbXBsYXRlLnBvcCgpLmNvbmNhdChyZXBsYWNlbWVudCksIHJlcDogYWNjXzkyOS5yZXB9O1xuICB9IGVsc2UgaWYgKGlzRGVsaW1pdGVyXzkwNChzXzkzMCkpIHtcbiAgICBsZXQgaW5uZXJSZXN1bHQgPSByZXBsYWNlVGVtcGxhdGVfOTEzKHNfOTMwLmlubmVyKCksIGFjY185MjkucmVwKTtcbiAgICByZXR1cm4ge3RlbXBsYXRlOiBhY2NfOTI5LnRlbXBsYXRlLnB1c2goaW5zZXJ0SW50b0RlbGltaXRlcl85MDgoc185MzAsIGlubmVyUmVzdWx0KSksIHJlcDogYWNjXzkyOS5yZXB9O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB7dGVtcGxhdGU6IGFjY185MjkudGVtcGxhdGUucHVzaChzXzkzMCksIHJlcDogYWNjXzkyOS5yZXB9O1xuICB9XG59O1xuZnVuY3Rpb24gcHJvY2Vzc1RlbXBsYXRlXzkxMih0ZW1wXzkzMywgaW50ZXJwXzkzNCA9IExpc3QoKSkge1xuICByZXR1cm4gdGVtcF85MzMucmVkdWNlKHByb2Nlc3NfOTA5LCB7dGVtcGxhdGU6IExpc3QoKSwgaW50ZXJwOiBpbnRlcnBfOTM0fSk7XG59XG5mdW5jdGlvbiByZXBsYWNlVGVtcGxhdGVfOTEzKHRlbXBfOTM1LCByZXBfOTM2KSB7XG4gIHJldHVybiB0ZW1wXzkzNS5yZWR1Y2UocmVwbGFjZV85MTEsIHt0ZW1wbGF0ZTogTGlzdCgpLCByZXA6IHJlcF85MzZ9KS50ZW1wbGF0ZTtcbn1cbmV4cG9ydCB7cHJvY2Vzc1RlbXBsYXRlXzkxMiBhcyBwcm9jZXNzVGVtcGxhdGV9O1xuZXhwb3J0IHtyZXBsYWNlVGVtcGxhdGVfOTEzIGFzIHJlcGxhY2VUZW1wbGF0ZX0iXX0=