"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.replaceTemplate = exports.processTemplate = undefined;

var _immutable = require("immutable");

var _ramdaFantasy = require("ramda-fantasy");

var _ramda = require("ramda");

var _ramda2 = _interopRequireDefault(_ramda);

var _syntax = require("./syntax");

var _syntax2 = _interopRequireDefault(_syntax);

var _errors = require("./errors");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const isDolar_954 = s_965 => s_965 && typeof s_965.match === "function" && s_965.match("identifier") && s_965.val() === "$";
const isDelimiter_955 = s_966 => s_966 && typeof s_966.match === "function" && s_966.match("delimiter");
const isBraces_956 = s_967 => s_967 && typeof s_967.match === "function" && s_967.match("braces");
const isParens_957 = s_968 => s_968 && typeof s_968.match === "function" && s_968.match("parens");
const isBrackets_958 = s_969 => s_969 && typeof s_969.match === "function" && s_969.match("brackets");
const insertIntoDelimiter_959 = _ramda2.default.cond([[isBraces_956, (s_970, r_971) => _syntax2.default.from("braces", r_971, s_970)], [isParens_957, (s_972, r_973) => _syntax2.default.from("parens", r_973, s_972)], [isBrackets_958, (s_974, r_975) => _syntax2.default.from("brackets", r_975, s_974)]]);
const process_960 = (acc_976, s_977) => {
  if (isBraces_956(s_977) && isDolar_954(acc_976.template.last())) {
    return { template: acc_976.template.push(_syntax2.default.from("braces", _immutable.List.of(_syntax2.default.from("number", acc_976.interp.size)), s_977)), interp: acc_976.interp.push(s_977.inner()) };
  } else if (isDelimiter_955(s_977)) {
    let innerResult = processTemplate_963(s_977.inner(), acc_976.interp);
    return { template: acc_976.template.push(insertIntoDelimiter_959(s_977, innerResult.template)), interp: innerResult.interp };
  } else {
    return { template: acc_976.template.push(s_977), interp: acc_976.interp };
  }
};
function cloneLineNumber_961(to_978, from_979) {
  if (from_979 && to_978 && typeof to_978.setLineNumber === "function") {
    return to_978.setLineNumber(from_979.lineNumber());
  }
  return to_978;
}
const replace_962 = (acc_980, s_981) => {
  let last_982 = acc_980.template.get(-1);
  let beforeLast_983 = acc_980.template.get(-2);
  if (isBraces_956(s_981) && isDolar_954(last_982)) {
    let index = s_981.inner().first().val();
    (0, _errors.assert)(acc_980.rep.size > index, "unknown replacement value");
    let replacement = cloneLineNumber_961(acc_980.rep.get(index), beforeLast_983);
    return { template: acc_980.template.pop().concat(replacement), rep: acc_980.rep };
  } else if (isDelimiter_955(s_981)) {
    let innerResult = replaceTemplate_964(s_981.inner(), acc_980.rep);
    return { template: acc_980.template.push(insertIntoDelimiter_959(s_981, innerResult)), rep: acc_980.rep };
  } else {
    return { template: acc_980.template.push(s_981), rep: acc_980.rep };
  }
};
function processTemplate_963(temp_984) {
  let interp_985 = arguments.length <= 1 || arguments[1] === undefined ? (0, _immutable.List)() : arguments[1];

  return temp_984.reduce(process_960, { template: (0, _immutable.List)(), interp: interp_985 });
}
function replaceTemplate_964(temp_986, rep_987) {
  return temp_986.reduce(replace_962, { template: (0, _immutable.List)(), rep: rep_987 }).template;
}
exports.processTemplate = processTemplate_963;
exports.replaceTemplate = replaceTemplate_964;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3N3ZWV0L3RlbXBsYXRlLXByb2Nlc3Nvci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0EsTUFBTSxjQUFjLFNBQVMsU0FBUyxPQUFPLE1BQU0sS0FBYixLQUF1QixVQUFoQyxJQUE4QyxNQUFNLEtBQU4sQ0FBWSxZQUFaLENBQTlDLElBQTJFLE1BQU0sR0FBTixPQUFnQixHQUF4SDtBQUNBLE1BQU0sa0JBQWtCLFNBQVMsU0FBUyxPQUFPLE1BQU0sS0FBYixLQUF1QixVQUFoQyxJQUE4QyxNQUFNLEtBQU4sQ0FBWSxXQUFaLENBQS9FO0FBQ0EsTUFBTSxlQUFlLFNBQVMsU0FBUyxPQUFPLE1BQU0sS0FBYixLQUF1QixVQUFoQyxJQUE4QyxNQUFNLEtBQU4sQ0FBWSxRQUFaLENBQTVFO0FBQ0EsTUFBTSxlQUFlLFNBQVMsU0FBUyxPQUFPLE1BQU0sS0FBYixLQUF1QixVQUFoQyxJQUE4QyxNQUFNLEtBQU4sQ0FBWSxRQUFaLENBQTVFO0FBQ0EsTUFBTSxpQkFBaUIsU0FBUyxTQUFTLE9BQU8sTUFBTSxLQUFiLEtBQXVCLFVBQWhDLElBQThDLE1BQU0sS0FBTixDQUFZLFVBQVosQ0FBOUU7QUFDQSxNQUFNLDBCQUEwQixnQkFBRSxJQUFGLENBQU8sQ0FBQyxDQUFDLFlBQUQsRUFBZSxDQUFDLEtBQUQsRUFBUSxLQUFSLEtBQWtCLGlCQUFPLElBQVAsQ0FBWSxRQUFaLEVBQXNCLEtBQXRCLEVBQTZCLEtBQTdCLENBQWpDLENBQUQsRUFBd0UsQ0FBQyxZQUFELEVBQWUsQ0FBQyxLQUFELEVBQVEsS0FBUixLQUFrQixpQkFBTyxJQUFQLENBQVksUUFBWixFQUFzQixLQUF0QixFQUE2QixLQUE3QixDQUFqQyxDQUF4RSxFQUErSSxDQUFDLGNBQUQsRUFBaUIsQ0FBQyxLQUFELEVBQVEsS0FBUixLQUFrQixpQkFBTyxJQUFQLENBQVksVUFBWixFQUF3QixLQUF4QixFQUEr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TyxTQUFTLE1BQVQsQ0FBZ0IsV0FBaEIsRUFBNkIsRUFBQyxVQUFVLHNCQUFYLEVBQW1CLFFBQVEsVUFBM0IsRUFBN0IsQ0FBUDtBQUNEO0FBQ0QsU0FBUyxtQkFBVCxDQUE2QixRQUE3QixFQUF1QyxPQUF2QyxFQUFnRDtBQUM5QyxTQUFPLFNBQVMsTUFBVCxDQUFnQixXQUFoQixFQUE2QixFQUFDLFVBQVUsc0JBQVgsRUFBbUIsS0FBSyxPQUF4QixFQUE3QixFQUErRCxRQUF0RTtBQUNEO1FBQzhCLGUsR0FBdkIsbUI7UUFDdUIsZSxHQUF2QixtQiIsImZpbGUiOiJ0ZW1wbGF0ZS1wcm9jZXNzb3IuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0xpc3R9IGZyb20gXCJpbW11dGFibGVcIjtcbmltcG9ydCB7TWF5YmV9IGZyb20gXCJyYW1kYS1mYW50YXN5XCI7XG5pbXBvcnQgXyBmcm9tIFwicmFtZGFcIjtcbmltcG9ydCBTeW50YXggZnJvbSBcIi4vc3ludGF4XCI7XG5pbXBvcnQge2Fzc2VydH0gZnJvbSBcIi4vZXJyb3JzXCI7XG5jb25zdCBpc0RvbGFyXzk1NCA9IHNfOTY1ID0+IHNfOTY1ICYmIHR5cGVvZiBzXzk2NS5tYXRjaCA9PT0gXCJmdW5jdGlvblwiICYmIHNfOTY1Lm1hdGNoKFwiaWRlbnRpZmllclwiKSAmJiBzXzk2NS52YWwoKSA9PT0gXCIkXCI7XG5jb25zdCBpc0RlbGltaXRlcl85NTUgPSBzXzk2NiA9PiBzXzk2NiAmJiB0eXBlb2Ygc185NjYubWF0Y2ggPT09IFwiZnVuY3Rpb25cIiAmJiBzXzk2Ni5tYXRjaChcImRlbGltaXRlclwiKTtcbmNvbnN0IGlzQnJhY2VzXzk1NiA9IHNfOTY3ID0+IHNfOTY3ICYmIHR5cGVvZiBzXzk2Ny5tYXRjaCA9PT0gXCJmdW5jdGlvblwiICYmIHNfOTY3Lm1hdGNoKFwiYnJhY2VzXCIpO1xuY29uc3QgaXNQYXJlbnNfOTU3ID0gc185NjggPT4gc185NjggJiYgdHlwZW9mIHNfOTY4Lm1hdGNoID09PSBcImZ1bmN0aW9uXCIgJiYgc185NjgubWF0Y2goXCJwYXJlbnNcIik7XG5jb25zdCBpc0JyYWNrZXRzXzk1OCA9IHNfOTY5ID0+IHNfOTY5ICYmIHR5cGVvZiBzXzk2OS5tYXRjaCA9PT0gXCJmdW5jdGlvblwiICYmIHNfOTY5Lm1hdGNoKFwiYnJhY2tldHNcIik7XG5jb25zdCBpbnNlcnRJbnRvRGVsaW1pdGVyXzk1OSA9IF8uY29uZChbW2lzQnJhY2VzXzk1NiwgKHNfOTcwLCByXzk3MSkgPT4gU3ludGF4LmZyb20oXCJicmFjZXNcIiwgcl85NzEsIHNfOTcwKV0sIFtpc1BhcmVuc185NTcsIChzXzk3Miwgcl85NzMpID0+IFN5bnRheC5mcm9tKFwicGFyZW5zXCIsIHJfOTczLCBzXzk3MildLCBbaXNCcmFja2V0c185NTgsIChzXzk3NCwgcl85NzUpID0+IFN5bnRheC5mcm9tKFwiYnJhY2tldHNcIiwgcl85NzUsIHNfOTc0KV1dKTtcbmNvbnN0IHByb2Nlc3NfOTYwID0gKGFjY185NzYsIHNfOTc3KSA9PiB7XG4gIGlmIChpc0JyYWNlc185NTYoc185NzcpICYmIGlzRG9sYXJfOTU0KGFjY185NzYudGVtcGxhdGUubGFzdCgpKSkge1xuICAgIHJldHVybiB7dGVtcGxhdGU6IGFjY185NzYudGVtcGxhdGUucHVzaChTeW50YXguZnJvbShcImJyYWNlc1wiLCBMaXN0Lm9mKFN5bnRheC5mcm9tKFwibnVtYmVyXCIsIGFjY185NzYuaW50ZXJwLnNpemUpKSwgc185NzcpKSwgaW50ZXJwOiBhY2NfOTc2LmludGVycC5wdXNoKHNfOTc3LmlubmVyKCkpfTtcbiAgfSBlbHNlIGlmIChpc0RlbGltaXRlcl85NTUoc185NzcpKSB7XG4gICAgbGV0IGlubmVyUmVzdWx0ID0gcHJvY2Vzc1RlbXBsYXRlXzk2MyhzXzk3Ny5pbm5lcigpLCBhY2NfOTc2LmludGVycCk7XG4gICAgcmV0dXJuIHt0ZW1wbGF0ZTogYWNjXzk3Ni50ZW1wbGF0ZS5wdXNoKGluc2VydEludG9EZWxpbWl0ZXJfOTU5KHNfOTc3LCBpbm5lclJlc3VsdC50ZW1wbGF0ZSkpLCBpbnRlcnA6IGlubmVyUmVzdWx0LmludGVycH07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHt0ZW1wbGF0ZTogYWNjXzk3Ni50ZW1wbGF0ZS5wdXNoKHNfOTc3KSwgaW50ZXJwOiBhY2NfOTc2LmludGVycH07XG4gIH1cbn07XG5mdW5jdGlvbiBjbG9uZUxpbmVOdW1iZXJfOTYxKHRvXzk3OCwgZnJvbV85NzkpIHtcbiAgaWYgKGZyb21fOTc5ICYmIHRvXzk3OCAmJiB0eXBlb2YgdG9fOTc4LnNldExpbmVOdW1iZXIgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHJldHVybiB0b185Nzguc2V0TGluZU51bWJlcihmcm9tXzk3OS5saW5lTnVtYmVyKCkpO1xuICB9XG4gIHJldHVybiB0b185Nzg7XG59XG5jb25zdCByZXBsYWNlXzk2MiA9IChhY2NfOTgwLCBzXzk4MSkgPT4ge1xuICBsZXQgbGFzdF85ODIgPSBhY2NfOTgwLnRlbXBsYXRlLmdldCgtMSk7XG4gIGxldCBiZWZvcmVMYXN0Xzk4MyA9IGFjY185ODAudGVtcGxhdGUuZ2V0KC0yKTtcbiAgaWYgKGlzQnJhY2VzXzk1NihzXzk4MSkgJiYgaXNEb2xhcl85NTQobGFzdF85ODIpKSB7XG4gICAgbGV0IGluZGV4ID0gc185ODEuaW5uZXIoKS5maXJzdCgpLnZhbCgpO1xuICAgIGFzc2VydChhY2NfOTgwLnJlcC5zaXplID4gaW5kZXgsIFwidW5rbm93biByZXBsYWNlbWVudCB2YWx1ZVwiKTtcbiAgICBsZXQgcmVwbGFjZW1lbnQgPSBjbG9uZUxpbmVOdW1iZXJfOTYxKGFjY185ODAucmVwLmdldChpbmRleCksIGJlZm9yZUxhc3RfOTgzKTtcbiAgICByZXR1cm4ge3RlbXBsYXRlOiBhY2NfOTgwLnRlbXBsYXRlLnBvcCgpLmNvbmNhdChyZXBsYWNlbWVudCksIHJlcDogYWNjXzk4MC5yZXB9O1xuICB9IGVsc2UgaWYgKGlzRGVsaW1pdGVyXzk1NShzXzk4MSkpIHtcbiAgICBsZXQgaW5uZXJSZXN1bHQgPSByZXBsYWNlVGVtcGxhdGVfOTY0KHNfOTgxLmlubmVyKCksIGFjY185ODAucmVwKTtcbiAgICByZXR1cm4ge3RlbXBsYXRlOiBhY2NfOTgwLnRlbXBsYXRlLnB1c2goaW5zZXJ0SW50b0RlbGltaXRlcl85NTkoc185ODEsIGlubmVyUmVzdWx0KSksIHJlcDogYWNjXzk4MC5yZXB9O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB7dGVtcGxhdGU6IGFjY185ODAudGVtcGxhdGUucHVzaChzXzk4MSksIHJlcDogYWNjXzk4MC5yZXB9O1xuICB9XG59O1xuZnVuY3Rpb24gcHJvY2Vzc1RlbXBsYXRlXzk2Myh0ZW1wXzk4NCwgaW50ZXJwXzk4NSA9IExpc3QoKSkge1xuICByZXR1cm4gdGVtcF85ODQucmVkdWNlKHByb2Nlc3NfOTYwLCB7dGVtcGxhdGU6IExpc3QoKSwgaW50ZXJwOiBpbnRlcnBfOTg1fSk7XG59XG5mdW5jdGlvbiByZXBsYWNlVGVtcGxhdGVfOTY0KHRlbXBfOTg2LCByZXBfOTg3KSB7XG4gIHJldHVybiB0ZW1wXzk4Ni5yZWR1Y2UocmVwbGFjZV85NjIsIHt0ZW1wbGF0ZTogTGlzdCgpLCByZXA6IHJlcF85ODd9KS50ZW1wbGF0ZTtcbn1cbmV4cG9ydCB7cHJvY2Vzc1RlbXBsYXRlXzk2MyBhcyBwcm9jZXNzVGVtcGxhdGV9O1xuZXhwb3J0IHtyZXBsYWNlVGVtcGxhdGVfOTY0IGFzIHJlcGxhY2VUZW1wbGF0ZX0iXX0=