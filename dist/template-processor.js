"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.replaceTemplate = exports.processTemplate = undefined;

var _immutable = require("immutable");

var _ramdaFantasy = require("ramda-fantasy");

var _ramda = require("ramda");

var _ramda2 = _interopRequireDefault(_ramda);

var _syntax = require("./syntax");

var _syntax2 = _interopRequireDefault(_syntax);

var _errors = require("./errors");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const isDolar_964 = s_975 => s_975 && typeof s_975.match === "function" && s_975.match("identifier") && s_975.val() === "$";
const isDelimiter_965 = s_976 => s_976 && typeof s_976.match === "function" && s_976.match("delimiter");
const isBraces_966 = s_977 => s_977 && typeof s_977.match === "function" && s_977.match("braces");
const isParens_967 = s_978 => s_978 && typeof s_978.match === "function" && s_978.match("parens");
const isBrackets_968 = s_979 => s_979 && typeof s_979.match === "function" && s_979.match("brackets");
const insertIntoDelimiter_969 = _ramda2.default.cond([[isBraces_966, (s_980, r_981) => _syntax2.default.from("braces", r_981, s_980)], [isParens_967, (s_982, r_983) => _syntax2.default.from("parens", r_983, s_982)], [isBrackets_968, (s_984, r_985) => _syntax2.default.from("brackets", r_985, s_984)]]);
const process_970 = (acc_986, s_987) => {
  if (isBraces_966(s_987) && isDolar_964(acc_986.template.last())) {
    return { template: acc_986.template.push(_syntax2.default.from("braces", _immutable.List.of(_syntax2.default.from("number", acc_986.interp.size)), s_987)), interp: acc_986.interp.push(s_987.inner()) };
  } else if (isDelimiter_965(s_987)) {
    let innerResult = processTemplate_973(s_987.inner(), acc_986.interp);
    return { template: acc_986.template.push(insertIntoDelimiter_969(s_987, innerResult.template)), interp: innerResult.interp };
  } else {
    return { template: acc_986.template.push(s_987), interp: acc_986.interp };
  }
};
function cloneLineNumber_971(to_988, from_989) {
  if (from_989 && to_988) {
    if (typeof to_988.setLineNumber === "function") {
      return to_988.setLineNumber(from_989.lineNumber());
    } else if (_immutable.List.isList(to_988)) {
      return to_988.map(x_990 => cloneLineNumber_971(x_990, from_989));
    }
  }
  return to_988;
}
const replace_972 = (acc_991, s_992) => {
  let last_993 = acc_991.template.get(-1);
  let beforeLast_994 = acc_991.template.get(-2);
  if (isBraces_966(s_992) && isDolar_964(last_993)) {
    let index = s_992.inner().first().val();
    (0, _errors.assert)(acc_991.rep.size > index, "unknown replacement value");
    let replacement = cloneLineNumber_971(acc_991.rep.get(index), beforeLast_994);
    return { template: acc_991.template.pop().concat(replacement), rep: acc_991.rep };
  } else if (isDelimiter_965(s_992)) {
    let innerResult = replaceTemplate_974(s_992.inner(), acc_991.rep);
    return { template: acc_991.template.push(insertIntoDelimiter_969(s_992, innerResult)), rep: acc_991.rep };
  } else {
    return { template: acc_991.template.push(s_992), rep: acc_991.rep };
  }
};
function processTemplate_973(temp_995) {
  let interp_996 = arguments.length <= 1 || arguments[1] === undefined ? (0, _immutable.List)() : arguments[1];

  return temp_995.reduce(process_970, { template: (0, _immutable.List)(), interp: interp_996 });
}
function replaceTemplate_974(temp_997, rep_998) {
  return temp_997.reduce(replace_972, { template: (0, _immutable.List)(), rep: rep_998 }).template;
}
exports.processTemplate = processTemplate_973;
exports.replaceTemplate = replaceTemplate_974;
//# sourceMappingURL=data:application/json;base64,