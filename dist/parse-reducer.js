"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _terms = require("./terms");

var _terms2 = _interopRequireDefault(_terms);

var _shiftReducer = require("shift-reducer");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class ParseReducer extends _shiftReducer.CloneReducer {
  constructor(context_567) {
    super();
    this.context = context_567;
  }
  reduceModule(node_568, state_569) {
    return new _terms2.default("Module", { directives: state_569.directives.toArray(), items: state_569.items.toArray() });
  }
  reduceImport(node_570, state_571) {
    let moduleSpecifier_572 = state_571.moduleSpecifier ? state_571.moduleSpecifier.val() : null;
    return new _terms2.default("Import", { defaultBinding: state_571.defaultBinding, namedImports: state_571.namedImports.toArray(), moduleSpecifier: moduleSpecifier_572, forSyntax: node_570.forSyntax });
  }
  reduceImportNamespace(node_573, state_574) {
    let moduleSpecifier_575 = state_574.moduleSpecifier ? state_574.moduleSpecifier.val() : null;
    return new _terms2.default("ImportNamespace", { defaultBinding: state_574.defaultBinding, namespaceBinding: state_574.namespaceBinding, moduleSpecifier: moduleSpecifier_575, forSyntax: node_573.forSyntax });
  }
  reduceExport(node_576, state_577) {
    return new _terms2.default("Export", { declaration: state_577.declaration });
  }
  reduceExportAllFrom(node_578, state_579) {
    let moduleSpecifier_580 = state_579.moduleSpecifier ? state_579.moduleSpecifier.val() : null;
    return new _terms2.default("ExportAllFrom", { moduleSpecifier: moduleSpecifier_580 });
  }
  reduceExportFrom(node_581, state_582) {
    let moduleSpecifier_583 = state_582.moduleSpecifier ? state_582.moduleSpecifier.val() : null;
    return new _terms2.default("ExportFrom", { moduleSpecifier: moduleSpecifier_583, namedExports: state_582.namedExports.toArray() });
  }
  reduceExportSpecifier(node_584, state_585) {
    let name_586 = state_585.name,
        exportedName_587 = state_585.exportedName;
    if (name_586 == null) {
      name_586 = exportedName_587.resolve(this.context.phase);
      exportedName_587 = exportedName_587.val();
    } else {
      name_586 = name_586.resolve(this.context.phase);
      exportedName_587 = exportedName_587.val();
    }
    return new _terms2.default("ExportSpecifier", { name: name_586, exportedName: exportedName_587 });
  }
  reduceImportSpecifier(node_588, state_589) {
    let name_590 = state_589.name ? state_589.name.resolve(this.context.phase) : null;
    return new _terms2.default("ImportSpecifier", { name: name_590, binding: state_589.binding });
  }
  reduceIdentifierExpression(node_591, state_592) {
    return new _terms2.default("IdentifierExpression", { name: node_591.name.resolve(this.context.phase) });
  }
  reduceLiteralNumericExpression(node_593, state_594) {
    return new _terms2.default("LiteralNumericExpression", { value: node_593.value.val() });
  }
  reduceLiteralBooleanExpression(node_595, state_596) {
    return new _terms2.default("LiteralBooleanExpression", { value: node_595.value.val() === "true" });
  }
  reduceLiteralStringExpression(node_597, state_598) {
    return new _terms2.default("LiteralStringExpression", { value: node_597.value.token.str });
  }
  reduceCallExpression(node_599, state_600) {
    return new _terms2.default("CallExpression", { callee: state_600.callee, arguments: state_600.arguments.toArray() });
  }
  reduceFunctionBody(node_601, state_602) {
    return new _terms2.default("FunctionBody", { directives: state_602.directives.toArray(), statements: state_602.statements.toArray() });
  }
  reduceFormalParameters(node_603, state_604) {
    return new _terms2.default("FormalParameters", { items: state_604.items.toArray(), rest: state_604.rest });
  }
  reduceBindingIdentifier(node_605, state_606) {
    return new _terms2.default("BindingIdentifier", { name: node_605.name.resolve(this.context.phase) });
  }
  reduceBinaryExpression(node_607, state_608) {
    return new _terms2.default("BinaryExpression", { left: state_608.left, operator: node_607.operator.val(), right: state_608.right });
  }
  reduceObjectExpression(node_609, state_610) {
    return new _terms2.default("ObjectExpression", { properties: state_610.properties.toArray() });
  }
  reduceVariableDeclaration(node_611, state_612) {
    return new _terms2.default("VariableDeclaration", { kind: state_612.kind, declarators: state_612.declarators.toArray() });
  }
  reduceStaticPropertyName(node_613, state_614) {
    return new _terms2.default("StaticPropertyName", { value: node_613.value.val().toString() });
  }
  reduceArrayExpression(node_615, state_616) {
    return new _terms2.default("ArrayExpression", { elements: state_616.elements.toArray() });
  }
  reduceStaticMemberExpression(node_617, state_618) {
    return new _terms2.default("StaticMemberExpression", { object: state_618.object, property: state_618.property.val() });
  }
}
exports.default = ParseReducer;
//# sourceMappingURL=data:application/json;base64,