"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _terms = require("./terms");

var _terms2 = _interopRequireDefault(_terms);

var _shiftReducer = require("shift-reducer");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class ParseReducer extends _shiftReducer.CloneReducer {
  constructor(context_536) {
    super();
    this.context = context_536;
  }
  reduceModule(node_537, state_538) {
    return new _terms2.default("Module", { directives: state_538.directives.toArray(), items: state_538.items.toArray() });
  }
  reduceImport(node_539, state_540) {
    let moduleSpecifier_541 = state_540.moduleSpecifier ? state_540.moduleSpecifier.val() : null;
    return new _terms2.default("Import", { defaultBinding: state_540.defaultBinding, namedImports: state_540.namedImports.toArray(), moduleSpecifier: moduleSpecifier_541, forSyntax: node_539.forSyntax });
  }
  reduceImportNamespace(node_542, state_543) {
    let moduleSpecifier_544 = state_543.moduleSpecifier ? state_543.moduleSpecifier.val() : null;
    return new _terms2.default("ImportNamespace", { defaultBinding: state_543.defaultBinding, namespaceBinding: state_543.namespaceBinding, moduleSpecifier: moduleSpecifier_544, forSyntax: node_542.forSyntax });
  }
  reduceExport(node_545, state_546) {
    return new _terms2.default("Export", { declaration: state_546.declaration });
  }
  reduceExportAllFrom(node_547, state_548) {
    let moduleSpecifier_549 = state_548.moduleSpecifier ? state_548.moduleSpecifier.val() : null;
    return new _terms2.default("ExportAllFrom", { moduleSpecifier: moduleSpecifier_549 });
  }
  reduceExportFrom(node_550, state_551) {
    let moduleSpecifier_552 = state_551.moduleSpecifier ? state_551.moduleSpecifier.val() : null;
    return new _terms2.default("ExportFrom", { moduleSpecifier: moduleSpecifier_552, namedExports: state_551.namedExports.toArray() });
  }
  reduceExportSpecifier(node_553, state_554) {
    let name_555 = state_554.name,
        exportedName_556 = state_554.exportedName;
    if (name_555 == null) {
      name_555 = exportedName_556.resolve(this.context.phase);
      exportedName_556 = exportedName_556.val();
    } else {
      name_555 = name_555.resolve(this.context.phase);
      exportedName_556 = exportedName_556.val();
    }
    return new _terms2.default("ExportSpecifier", { name: name_555, exportedName: exportedName_556 });
  }
  reduceImportSpecifier(node_557, state_558) {
    let name_559 = state_558.name ? state_558.name.resolve(this.context.phase) : null;
    return new _terms2.default("ImportSpecifier", { name: name_559, binding: state_558.binding });
  }
  reduceIdentifierExpression(node_560, state_561) {
    return new _terms2.default("IdentifierExpression", { name: node_560.name.resolve(this.context.phase) });
  }
  reduceLiteralNumericExpression(node_562, state_563) {
    return new _terms2.default("LiteralNumericExpression", { value: node_562.value.val() });
  }
  reduceLiteralBooleanExpression(node_564, state_565) {
    return new _terms2.default("LiteralBooleanExpression", { value: node_564.value.val() === "true" });
  }
  reduceLiteralStringExpression(node_566, state_567) {
    return new _terms2.default("LiteralStringExpression", { value: node_566.value.token.str });
  }
  reduceCallExpression(node_568, state_569) {
    return new _terms2.default("CallExpression", { callee: state_569.callee, arguments: state_569.arguments.toArray() });
  }
  reduceFunctionBody(node_570, state_571) {
    return new _terms2.default("FunctionBody", { directives: state_571.directives.toArray(), statements: state_571.statements.toArray() });
  }
  reduceFormalParameters(node_572, state_573) {
    return new _terms2.default("FormalParameters", { items: state_573.items.toArray(), rest: state_573.rest });
  }
  reduceBindingIdentifier(node_574, state_575) {
    return new _terms2.default("BindingIdentifier", { name: node_574.name.resolve(this.context.phase) });
  }
  reduceBinaryExpression(node_576, state_577) {
    return new _terms2.default("BinaryExpression", { left: state_577.left, operator: node_576.operator.val(), right: state_577.right });
  }
  reduceObjectExpression(node_578, state_579) {
    return new _terms2.default("ObjectExpression", { properties: state_579.properties.toArray() });
  }
  reduceVariableDeclaration(node_580, state_581) {
    return new _terms2.default("VariableDeclaration", { kind: state_581.kind, declarators: state_581.declarators.toArray() });
  }
  reduceStaticPropertyName(node_582, state_583) {
    return new _terms2.default("StaticPropertyName", { value: node_582.value.val().toString() });
  }
  reduceArrayExpression(node_584, state_585) {
    return new _terms2.default("ArrayExpression", { elements: state_585.elements.toArray() });
  }
  reduceStaticMemberExpression(node_586, state_587) {
    return new _terms2.default("StaticMemberExpression", { object: state_587.object, property: state_587.property.val() });
  }
}
exports.default = ParseReducer;
//# sourceMappingURL=data:application/json;base64,