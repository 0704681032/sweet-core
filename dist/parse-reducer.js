"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _terms = require("./terms");

var _terms2 = _interopRequireDefault(_terms);

var _shiftReducer = require("shift-reducer");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class ParseReducer extends _shiftReducer.CloneReducer {
  constructor(context_527) {
    super();
    this.context = context_527;
  }
  reduceModule(node_528, state_529) {
    return new _terms2.default("Module", { directives: state_529.directives.toArray(), items: state_529.items.toArray() });
  }
  reduceImport(node_530, state_531) {
    let moduleSpecifier_532 = state_531.moduleSpecifier ? state_531.moduleSpecifier.val() : null;
    return new _terms2.default("Import", { defaultBinding: state_531.defaultBinding, namedImports: state_531.namedImports.toArray(), moduleSpecifier: moduleSpecifier_532, forSyntax: node_530.forSyntax });
  }
  reduceImportNamespace(node_533, state_534) {
    let moduleSpecifier_535 = state_534.moduleSpecifier ? state_534.moduleSpecifier.val() : null;
    return new _terms2.default("ImportNamespace", { defaultBinding: state_534.defaultBinding, namespaceBinding: state_534.namespaceBinding, moduleSpecifier: moduleSpecifier_535, forSyntax: node_533.forSyntax });
  }
  reduceExport(node_536, state_537) {
    return new _terms2.default("Export", { declaration: state_537.declaration });
  }
  reduceExportAllFrom(node_538, state_539) {
    let moduleSpecifier_540 = state_539.moduleSpecifier ? state_539.moduleSpecifier.val() : null;
    return new _terms2.default("ExportAllFrom", { moduleSpecifier: moduleSpecifier_540 });
  }
  reduceExportFrom(node_541, state_542) {
    let moduleSpecifier_543 = state_542.moduleSpecifier ? state_542.moduleSpecifier.val() : null;
    return new _terms2.default("ExportFrom", { moduleSpecifier: moduleSpecifier_543, namedExports: state_542.namedExports.toArray() });
  }
  reduceExportSpecifier(node_544, state_545) {
    let name_546 = state_545.name,
        exportedName_547 = state_545.exportedName;
    if (name_546 == null) {
      name_546 = exportedName_547.resolve(this.context.phase);
      exportedName_547 = exportedName_547.val();
    } else {
      name_546 = name_546.resolve(this.context.phase);
      exportedName_547 = exportedName_547.val();
    }
    return new _terms2.default("ExportSpecifier", { name: name_546, exportedName: exportedName_547 });
  }
  reduceImportSpecifier(node_548, state_549) {
    let name_550 = state_549.name ? state_549.name.resolve(this.context.phase) : null;
    return new _terms2.default("ImportSpecifier", { name: name_550, binding: state_549.binding });
  }
  reduceIdentifierExpression(node_551, state_552) {
    return new _terms2.default("IdentifierExpression", { name: node_551.name.resolve(this.context.phase) });
  }
  reduceLiteralNumericExpression(node_553, state_554) {
    return new _terms2.default("LiteralNumericExpression", { value: node_553.value.val() });
  }
  reduceLiteralBooleanExpression(node_555, state_556) {
    return new _terms2.default("LiteralBooleanExpression", { value: node_555.value.val() === "true" });
  }
  reduceLiteralStringExpression(node_557, state_558) {
    return new _terms2.default("LiteralStringExpression", { value: node_557.value.token.str });
  }
  reduceCallExpression(node_559, state_560) {
    return new _terms2.default("CallExpression", { callee: state_560.callee, arguments: state_560.arguments.toArray() });
  }
  reduceFunctionBody(node_561, state_562) {
    return new _terms2.default("FunctionBody", { directives: state_562.directives.toArray(), statements: state_562.statements.toArray() });
  }
  reduceFormalParameters(node_563, state_564) {
    return new _terms2.default("FormalParameters", { items: state_564.items.toArray(), rest: state_564.rest });
  }
  reduceBindingIdentifier(node_565, state_566) {
    return new _terms2.default("BindingIdentifier", { name: node_565.name.resolve(this.context.phase) });
  }
  reduceBinaryExpression(node_567, state_568) {
    return new _terms2.default("BinaryExpression", { left: state_568.left, operator: node_567.operator.val(), right: state_568.right });
  }
  reduceObjectExpression(node_569, state_570) {
    return new _terms2.default("ObjectExpression", { properties: state_570.properties.toArray() });
  }
  reduceVariableDeclaration(node_571, state_572) {
    return new _terms2.default("VariableDeclaration", { kind: state_572.kind, declarators: state_572.declarators.toArray() });
  }
  reduceStaticPropertyName(node_573, state_574) {
    return new _terms2.default("StaticPropertyName", { value: node_573.value.val().toString() });
  }
  reduceArrayExpression(node_575, state_576) {
    return new _terms2.default("ArrayExpression", { elements: state_576.elements.toArray() });
  }
  reduceStaticMemberExpression(node_577, state_578) {
    return new _terms2.default("StaticMemberExpression", { object: state_578.object, property: state_578.property.val() });
  }
}
exports.default = ParseReducer;
//# sourceMappingURL=data:application/json;base64,